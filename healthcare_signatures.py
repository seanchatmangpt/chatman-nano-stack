"""
DSPy Signatures generated from Turtle ontology
Generated by ttl2dspy.py on 2025-07-24T09:03:35.390962

Ontology URI: 
Signatures generated: 18
"""

import dspy
from typing import Union

# Type aliases for better IDE support
Text = str
Number = Union[int, float]
Boolean = bool

__all__ = ["BloodPressureSignature", "MonitoringDeviceSignature", "MedicalDeviceSignature", "MedicationSignature", "BodyTemperatureSignature", "PrescriptionSignature", "VitalSignSignature", "HeartRateSignature", "PainLevelSignature", "PulseOximeterSignature", "DosageSignature", "MedicalAlertSignature", "PatientSignature", "RespiratoryRateSignature", "CriticalAlertSignature", "OxygenSaturationSignature", "ECGMonitorSignature", "BloodGlucoseSignature"]

class BloodPressureSignature(dspy.Signature):
    """DSPy Signature for BloodPressure
    
    Generated from: http://cns.ai/ontology/healthcare#BloodPressure
    Timestamp: 2025-07-24T09:03:35.388448"""
    
    systolic_pressure = dspy.InputField(desc="Systolic pressure must be between 50-300 mmHg", dtype=float)
    diastolic_pressure = dspy.InputField(desc="Diastolic pressure must be between 20-200 mmHg", dtype=float)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class MonitoringDeviceSignature(dspy.Signature):
    """DSPy Signature for MonitoringDevice
    
    Generated from: http://cns.ai/ontology/healthcare#MonitoringDevice
    Timestamp: 2025-07-24T09:03:35.388635"""
    
    sampling_rate = dspy.InputField(desc="Sampling rate must be between 0.1 Hz and 1 kHz", dtype=float)
    measurement_accuracy = dspy.InputField(desc="Measurement accuracy must be ≥90%", dtype=float)
    real_time_monitoring = dspy.InputField(desc="Monitoring devices must have real-time monitoring enabled", dtype=bool)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class MedicalDeviceSignature(dspy.Signature):
    """DSPy Signature for MedicalDevice
    
    Generated from: http://cns.ai/ontology/healthcare#MedicalDevice
    Timestamp: 2025-07-24T09:03:35.388809"""
    
    device_id = dspy.InputField(desc="Device ID must be 6-32 alphanumeric characters", dtype=str)
    device_model = dspy.InputField(desc="All devices must have model information", dtype=str)
    device_manufacturer = dspy.InputField(desc="All devices must have manufacturer information", dtype=str)
    device_status = dspy.InputField(desc="Device status must be from approved list", dtype=str)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class MedicationSignature(dspy.Signature):
    """DSPy Signature for Medication
    
    Generated from: http://cns.ai/ontology/healthcare#Medication
    Timestamp: 2025-07-24T09:03:35.388924"""
    
    medication_name = dspy.InputField(desc="All medications must have a name", dtype=str)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class BodyTemperatureSignature(dspy.Signature):
    """DSPy Signature for BodyTemperature
    
    Generated from: http://cns.ai/ontology/healthcare#BodyTemperature
    Timestamp: 2025-07-24T09:03:35.389039"""
    
    temperature_celsius = dspy.InputField(desc="Body temperature must be between 30-45°C", dtype=float)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class PrescriptionSignature(dspy.Signature):
    """DSPy Signature for Prescription
    
    Generated from: http://cns.ai/ontology/healthcare#Prescription
    Timestamp: 2025-07-24T09:03:35.389167"""
    
    prescription_date = dspy.InputField(desc="All prescriptions must have a date", dtype=str)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class VitalSignSignature(dspy.Signature):
    """DSPy Signature for VitalSign
    
    Generated from: http://cns.ai/ontology/healthcare#VitalSign
    Timestamp: 2025-07-24T09:03:35.389344"""
    
    processing_latency = dspy.InputField(desc="Vital sign processing must complete within 1ms", dtype=float)
    ticks_used = dspy.InputField(desc="Vital sign processing must use ≤8 CPU ticks", dtype=int)
    measurement_unit = dspy.InputField(desc="All measurements must specify units", dtype=str)
    measurement_timestamp = dspy.InputField(desc="All vital sign measurements must have a timestamp", dtype=str)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class HeartRateSignature(dspy.Signature):
    """DSPy Signature for HeartRate
    
    Generated from: http://cns.ai/ontology/healthcare#HeartRate
    Timestamp: 2025-07-24T09:03:35.389481"""
    
    measurement_value = dspy.InputField(desc="Heart rate measurement must be physiologically possible", dtype=float)
    beats_per_minute = dspy.InputField(desc="Heart rate must be between 20-300 BPM", dtype=int)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class PainLevelSignature(dspy.Signature):
    """DSPy Signature for PainLevel
    
    Generated from: http://cns.ai/ontology/healthcare#PainLevel
    Timestamp: 2025-07-24T09:03:35.389596"""
    
    pain_score = dspy.InputField(desc="Pain score must be between 0-10", dtype=int)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class PulseOximeterSignature(dspy.Signature):
    """DSPy Signature for PulseOximeter
    
    Generated from: http://cns.ai/ontology/healthcare#PulseOximeter
    Timestamp: 2025-07-24T09:03:35.389710"""
    
    measurement_accuracy = dspy.InputField(desc="Pulse oximeters must have ≥95% accuracy", dtype=float)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class DosageSignature(dspy.Signature):
    """DSPy Signature for Dosage
    
    Generated from: http://cns.ai/ontology/healthcare#Dosage
    Timestamp: 2025-07-24T09:03:35.389891"""
    
    dosage_unit = dspy.InputField(desc="Dosage unit must be from approved pharmaceutical units", dtype=str)
    dosage_amount = dspy.InputField(desc="Dosage amount must be between 0.001mg and 10g", dtype=float)
    frequency = dspy.InputField(desc="Administration frequency must be from approved list", dtype=str)
    route = dspy.InputField(desc="Route of administration must be from approved list", dtype=str)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class MedicalAlertSignature(dspy.Signature):
    """DSPy Signature for MedicalAlert
    
    Generated from: http://cns.ai/ontology/healthcare#MedicalAlert
    Timestamp: 2025-07-24T09:03:35.390112"""
    
    alert_type = dspy.InputField(desc="Alert type must be from approved list", dtype=str)
    alert_timestamp = dspy.InputField(desc="All alerts must have a timestamp", dtype=str)
    alert_id = dspy.InputField(desc="Alert ID must be 8-64 alphanumeric characters", dtype=str)
    alert_response_time = dspy.InputField(desc="Medical alerts must be processed within 5 seconds", dtype=float)
    alert_status = dspy.InputField(desc="Alert status must be from approved workflow states", dtype=str)
    alert_severity = dspy.InputField(desc="Alert severity must be rated 1-5", dtype=int)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class PatientSignature(dspy.Signature):
    """DSPy Signature for Patient
    
    Generated from: http://cns.ai/ontology/healthcare#Patient
    Timestamp: 2025-07-24T09:03:35.390346"""
    
    height = dspy.InputField(desc="Patient height must be between 25cm and 250cm", dtype=float)
    patient_id = dspy.InputField(desc="Patient ID must be 6-20 alphanumeric characters", dtype=str)
    gender = dspy.InputField(desc="Gender must be from approved list", dtype=str)
    weight = dspy.InputField(desc="Patient weight must be between 0.5kg and 500kg", dtype=float)
    medical_record_number = dspy.InputField(desc="Medical record number must be 8-15 digits", dtype=str)
    acuity_level = dspy.InputField(desc="Patient acuity level must be rated 1-5", dtype=int)
    age = dspy.InputField(desc="Patient age must be between 0 and 120 years", dtype=int)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class RespiratoryRateSignature(dspy.Signature):
    """DSPy Signature for RespiratoryRate
    
    Generated from: http://cns.ai/ontology/healthcare#RespiratoryRate
    Timestamp: 2025-07-24T09:03:35.390465"""
    
    breaths_per_minute = dspy.InputField(desc="Respiratory rate must be between 4-60 breaths/min", dtype=int)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class CriticalAlertSignature(dspy.Signature):
    """DSPy Signature for CriticalAlert
    
    Generated from: http://cns.ai/ontology/healthcare#CriticalAlert
    Timestamp: 2025-07-24T09:03:35.390603"""
    
    alert_response_time = dspy.InputField(desc="Critical alerts must be processed within 1 second", dtype=float)
    alert_severity = dspy.InputField(desc="Critical alerts must have severity level 4 or 5", dtype=int)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class OxygenSaturationSignature(dspy.Signature):
    """DSPy Signature for OxygenSaturation
    
    Generated from: http://cns.ai/ontology/healthcare#OxygenSaturation
    Timestamp: 2025-07-24T09:03:35.390719"""
    
    oxygen_saturation_percent = dspy.InputField(desc="Oxygen saturation must be between 70-100%", dtype=float)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class ECGMonitorSignature(dspy.Signature):
    """DSPy Signature for ECGMonitor
    
    Generated from: http://cns.ai/ontology/healthcare#ECGMonitor
    Timestamp: 2025-07-24T09:03:35.390835"""
    
    sampling_rate = dspy.InputField(desc="ECG monitors require sampling rate ≥125 Hz", dtype=float)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class BloodGlucoseSignature(dspy.Signature):
    """DSPy Signature for BloodGlucose
    
    Generated from: http://cns.ai/ontology/healthcare#BloodGlucose
    Timestamp: 2025-07-24T09:03:35.390951"""
    
    glucose_mg_dl = dspy.InputField(desc="Blood glucose must be between 20-800 mg/dL", dtype=float)
    result = dspy.OutputField(desc="Generated result", dtype=str)


# Auto-generated signature registry
SIGNATURES = {
    "BloodPressureSignature": BloodPressureSignature,
    "MonitoringDeviceSignature": MonitoringDeviceSignature,
    "MedicalDeviceSignature": MedicalDeviceSignature,
    "MedicationSignature": MedicationSignature,
    "BodyTemperatureSignature": BodyTemperatureSignature,
    "PrescriptionSignature": PrescriptionSignature,
    "VitalSignSignature": VitalSignSignature,
    "HeartRateSignature": HeartRateSignature,
    "PainLevelSignature": PainLevelSignature,
    "PulseOximeterSignature": PulseOximeterSignature,
    "DosageSignature": DosageSignature,
    "MedicalAlertSignature": MedicalAlertSignature,
    "PatientSignature": PatientSignature,
    "RespiratoryRateSignature": RespiratoryRateSignature,
    "CriticalAlertSignature": CriticalAlertSignature,
    "OxygenSaturationSignature": OxygenSaturationSignature,
    "ECGMonitorSignature": ECGMonitorSignature,
    "BloodGlucoseSignature": BloodGlucoseSignature,
}

def get_signature(name: str) -> dspy.Signature:
    """Get signature by name"""
    if name not in SIGNATURES:
        raise ValueError(f"Unknown signature: {name}. Available: {list(SIGNATURES.keys())}")
    return SIGNATURES[name]

def list_signatures() -> list:
    """List all available signature names"""
    return list(SIGNATURES.keys())
