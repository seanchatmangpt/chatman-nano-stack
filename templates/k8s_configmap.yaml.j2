---
# CNS Aegis Fabric - Threat Signatures ConfigMap
# Generated from TTL: {{ timestamp }}
# NO HANDCODING - This file is auto-generated

apiVersion: v1
kind: ConfigMap
metadata:
  name: aegis-threat-signatures
  namespace: cns-system
  labels:
    app: aegis-fabric
    component: threats
    version: "{{ timestamp | replace(':', '-') | replace('T', '-') }}"
  annotations:
    aegis.cns.io/threat-count: "{{ threats | length }}"
    aegis.cns.io/critical-threats: "{{ threats | selectattr('properties.priority', 'equalto', 'critical') | list | length }}"
    aegis.cns.io/generation-time: "{{ timestamp }}"
data:
  threat_signatures.yaml: |
    # Aegis Fabric Threat Signatures
    # Auto-generated from TTL ontology
    # 80/20 Optimized: These signatures catch 80% of threats
    
    version: "1.0"
    generated: "{{ timestamp }}"
    
    threat_signatures:
{% for threat in threats %}
      - id: "{{ threat.name }}"
        type: "{{ threat.type }}"
        priority: "{{ threat.properties.get('priority', 'normal') }}"
        detection_pattern: "{{ threat.properties.get('detectionPattern', '') }}"
        propagation_speed_ms: {{ threat.properties.get('propagationSpeed', '100ms').strip('ms') }}
        false_positive_rate: {{ threat.properties.get('falsePositiveRate', '0.01') }}
        metadata:
          uri: "{{ threat.uri }}"
{% if 'thresholdRPS' in threat.properties %}
          threshold_rps: {{ threat.properties.thresholdRPS }}
{% endif %}
{% if 'thresholdAttempts' in threat.properties %}
          threshold_attempts: {{ threat.properties.thresholdAttempts }}
{% endif %}
{% if 'timeWindowSeconds' in threat.properties %}
          time_window_seconds: {{ threat.properties.timeWindowSeconds }}
{% endif %}
        response_actions:
{% if threat.properties.get('priority') == 'critical' %}
          - type: "block"
            severity: "immediate"
            duration: "permanent"
          - type: "alert"
            channels: ["security-ops", "soc-team"]
          - type: "isolate"
            scope: "pod"
{% elif threat.properties.get('priority') == 'high' %}
          - type: "rate_limit"
            limit: 10
            window: "60s"
          - type: "alert"
            channels: ["security-ops"]
{% else %}
          - type: "log"
            level: "warning"
          - type: "metric"
            counter: "aegis_threat_detected"
{% endif %}
{% endfor %}
    
    # Performance targets from TTL
    performance_targets:
      threat_detection_rate: {{ config.performance.threatDetectionRate }}
      false_positive_rate: {{ config.performance.falsePositiveRate }}
      propagation_latency_ms: {{ config.performance.propagationLatency.strip('ms') }}
      lookup_latency_ms: {{ config.performance.lookupLatency.strip('ms') }}
      throughput_rps: {{ config.performance.throughput }}

  threat_signatures.json: |
    {
      "version": "1.0",
      "generated": "{{ timestamp }}",
      "threats": [
{% for threat in threats %}
        {
          "id": "{{ threat.name }}",
          "type": "{{ threat.type }}",
          "priority": "{{ threat.properties.get('priority', 'normal') }}",
          "pattern": "{{ threat.properties.get('detectionPattern', '') | tojson }}",
          "propagation_ms": {{ threat.properties.get('propagationSpeed', '100ms').strip('ms') }},
          "fp_rate": {{ threat.properties.get('falsePositiveRate', '0.01') }}
        }{{ "," if not loop.last }}
{% endfor %}
      ]
    }

---
# Detection Rules ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: aegis-detection-rules
  namespace: cns-system
  labels:
    app: aegis-fabric
    component: rules
    version: "{{ timestamp | replace(':', '-') | replace('T', '-') }}"
data:
  detection_rules.yaml: |
    # Aegis Fabric Detection Rules
    # Auto-generated from TTL ontology
    
    version: "1.0"
    generated: "{{ timestamp }}"
    
    rule_sets:
{% for rule in rules %}
      - name: "{{ rule.name }}"
        uri: "{{ rule.uri }}"
        layer: "{{ rule.properties.get('layer', 'application') }}"
        processing_order: {{ rule.properties.get('processingOrder', '99') }}
        enabled: true
        conditions:
{% if rule.name == 'NetworkRule' %}
          - type: "rate_limit"
            threshold: 10000
            window: "1m"
          - type: "packet_size"
            max_bytes: 65535
          - type: "connection_limit"
            max_concurrent: 1000
{% elif rule.name == 'ApplicationRule' %}
          - type: "pattern_match"
            patterns:
              - "{{ threats | selectattr('type', 'equalto', 'ApplicationThreat') | map(attribute='properties.detectionPattern') | join('|') }}"
          - type: "content_length"
            max_bytes: 10485760
          - type: "header_validation"
            required: ["Content-Type", "User-Agent"]
{% elif rule.name == 'BehavioralRule' %}
          - type: "anomaly_detection"
            baseline_window: "24h"
            deviation_threshold: 3.0
          - type: "sequence_analysis"
            max_sequence_length: 100
          - type: "time_series"
            window: "5m"
{% endif %}
        actions:
          on_match:
            - log_level: "warning"
            - increment_counter: "rule_{{ rule.name | lower }}_matches"
            - propagate_via_gossip: true
          on_block:
            - log_level: "error"
            - alert_channels: ["security-ops"]
            - isolate_source: true
{% endfor %}

  rules_engine_config.yaml: |
    # BitActor Rules Engine Configuration
    engine:
      mode: "production"
      optimization: "80-20"
      parallel_evaluation: true
      max_rule_depth: 10
      cache_size_mb: 256
      
    evaluation:
      order: "priority"
      short_circuit: true
      batch_size: 100
      timeout_ms: {{ config.performance.lookupLatency.strip('ms') }}
      
    caching:
      enabled: true
      ttl_seconds: 300
      max_entries: 10000
      
    gossip_integration:
      enabled: true
      propagate_matches: true
      aggregate_window_ms: {{ config.gossip.interval.strip('ms') }}

---
# Gossip Protocol Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: aegis-gossip-config
  namespace: cns-system
  labels:
    app: aegis-fabric
    component: gossip
data:
  gossip_config.yaml: |
    # Gossip Protocol Configuration
    protocol:
      version: "2.0"
      fanout: {{ config.gossip.fanout }}
      interval_ms: {{ config.gossip.interval.strip('ms') }}
      max_hops: {{ config.gossip.maxHops }}
      convergence_target_ms: {{ config.gossip.convergenceTarget.strip('ms') }}
      
    membership:
      join_timeout_ms: 5000
      ping_interval_ms: 1000
      ping_timeout_ms: 500
      indirect_checks: 3
      
    transport:
      bind_addr: "0.0.0.0"
      bind_port: 7946
      advertise_addr: "${POD_IP}"
      advertise_port: 7946
      
    encryption:
      enabled: {{ config.service_mesh.mtlsEnabled | lower }}
      key_rotation_interval: "24h"
      
    performance:
      compression: "lz4"
      batch_size: 50
      queue_depth: 1000
      
  erlang_config: |
    %% Erlang VM configuration for gossip protocol
    [
      {kernel, [
        {inet_dist_listen_min, 9100},
        {inet_dist_listen_max, 9200}
      ]},
      {aegis_gossip, [
        {cookie, '{{ "aegis-" + (timestamp | replace(":", "") | replace("T", "") | replace("-", ""))[:16] }}'},
        {distributed_enabled, true},
        {sync_nodes_timeout, 30000}
      ]}
    ].

---
# Service Mesh Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: aegis-service-mesh-config
  namespace: cns-system
  labels:
    app: aegis-fabric
    component: service-mesh
data:
  mesh_config.yaml: |
    # Service Mesh Configuration for Aegis Fabric
    mesh:
      provider: "{{ config.service_mesh.provider }}"
      mtls:
        enabled: {{ config.service_mesh.mtlsEnabled | lower }}
        mode: "strict"
        
    circuit_breaker:
      enabled: true
      threshold: {{ config.service_mesh.circuitBreakerThreshold }}
      timeout_ms: 5000
      half_open_requests: 10
      
    retry_policy:
      enabled: true
      attempts: {{ config.service_mesh.retryAttempts }}
      timeout_ms: {{ config.service_mesh.timeoutMs }}
      backoff:
        type: "exponential"
        base_ms: 100
        max_ms: 10000
        
    load_balancing:
      algorithm: "least_request"
      health_check:
        interval_ms: 5000
        timeout_ms: 3000
        unhealthy_threshold: 3
        healthy_threshold: 2
        
    observability:
      tracing:
        enabled: true
        sampling_rate: 0.1
        propagation: "b3"
      metrics:
        enabled: true
        histogram_buckets: [0.5, 1, 2.5, 5, 10, 25, 50, 100, 250, 500, 1000, 2500, 5000, 10000]

---
# Environment-specific configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: aegis-env-config
  namespace: cns-system
  labels:
    app: aegis-fabric
    component: environment
data:
  environment.properties: |
    # Environment Configuration
    environment=production
    region=us-west-2
    cluster=aegis-primary
    
    # Feature Flags
    features.neural_enabled=true
    features.gossip_enabled=true
    features.service_mesh_enabled={{ config.service_mesh.mtlsEnabled | lower }}
    features.adversarial_protection=true
    features.rate_limiting=true
    
    # Performance Tuning
    performance.max_threads=100
    performance.connection_pool_size=50
    performance.cache_size_mb=1024
    performance.gc_interval_seconds=60
    
    # Monitoring
    monitoring.metrics_enabled=true
    monitoring.tracing_enabled=true
    monitoring.logging_level=INFO
    monitoring.audit_enabled=true