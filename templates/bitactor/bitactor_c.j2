/**
 * BitActor Implementation - Generated from {{ ontology_name }}
 * 8-tick performance guarantee with semantic signal processing
 * Generated by CNS Jinja AOT Compiler
 */

#ifndef {{ guard_name }}
#define {{ guard_name }}

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>
#include <time.h>

/* Platform-specific cycle counter */
#if defined(__x86_64__) || defined(__i386__)
    #include <x86intrin.h>
    static inline uint64_t rdtsc() { return __rdtsc(); }
#elif defined(__aarch64__)
    static inline uint64_t rdtsc() {
        uint64_t val;
        __asm__ volatile("mrs %0, cntvct_el0" : "=r" (val));
        return val;
    }
#elif defined(__arm__)
    static inline uint64_t rdtsc() {
        #if (__ARM_ARCH >= 6)
            uint32_t val;
            __asm__ volatile("mrc p15, 0, %0, c9, c13, 0" : "=r"(val));
            return val;
        #else
            struct timespec ts;
            clock_gettime(CLOCK_MONOTONIC, &ts);
            return ts.tv_sec * 1000000000ULL + ts.tv_nsec;
        #endif
    }
#else
    static inline uint64_t rdtsc() {
        struct timespec ts;
        clock_gettime(CLOCK_MONOTONIC, &ts);
        return ts.tv_sec * 1000000000ULL + ts.tv_nsec;
    }
#endif

/* Constants from TTL ontology */
#define {{ prefix|upper }}_MAX_SIGNALS      {{ max_signals|default(256) }}
#define {{ prefix|upper }}_RING_SIZE        {{ ring_size|default(4096) }}
/* Tick budget: 8 CPU cycles on x86, ~10ns on ARM */
#if defined(__x86_64__) || defined(__i386__)
#define {{ prefix|upper }}_TICK_BUDGET      {{ tick_budget|default(8) }}
#else
#define {{ prefix|upper }}_TICK_BUDGET      10000  /* 10 microseconds for non-x86 */
#endif

/* Signal types from ontology */
typedef enum {
{% for signal in signals %}
    {{ prefix|upper }}_SIGNAL_{{ signal.name|upper }} = {{ signal.id }},
{% endfor %}
    {{ prefix|upper }}_SIGNAL_MAX
} {{ prefix }}_signal_type_t;

/* Signal structure */
typedef struct {
    uint32_t type;
    uint32_t flags;
    uint64_t timestamp;
    uint64_t payload;
} {{ prefix }}_signal_t;

/* Handler function type */
typedef void (*{{ prefix }}_handler_fn)({{ prefix }}_signal_t* sig, void* scratch);

/* BitActor state */
typedef struct {
    {{ prefix }}_signal_t signal_ring[{{ prefix|upper }}_RING_SIZE];
    volatile uint32_t signal_head;
    volatile uint32_t signal_tail;
    
    uint8_t scratch[2048] __attribute__((aligned(64)));
    {{ prefix }}_handler_fn dispatch[1024];
    
    uint64_t tick_count;
    uint64_t signal_count;
} {{ prefix }}_bitactor_t;

/* Core API */
void {{ prefix }}_bitactor_init({{ prefix }}_bitactor_t* ba);
void {{ prefix }}_bitactor_tick({{ prefix }}_bitactor_t* ba);
bool {{ prefix }}_bitactor_enqueue_signal({{ prefix }}_bitactor_t* ba, const {{ prefix }}_signal_t* sig);

/* Generated handlers from TTL */
{% for handler in handlers %}
void {{ prefix }}_handle_{{ handler.name|c_identifier }}({{ prefix }}_signal_t* sig, void* scratch);
{% endfor %}

#endif /* {{ guard_name }} */

/* Implementation */
#ifdef {{ prefix|upper }}_IMPLEMENTATION

#include <string.h>
#include <assert.h>

void {{ prefix }}_bitactor_init({{ prefix }}_bitactor_t* ba) {
    memset(ba, 0, sizeof({{ prefix }}_bitactor_t));
    
    /* Register handlers from TTL */
{% for handler in handlers %}
    ba->dispatch[{{ prefix|upper }}_SIGNAL_{{ handler.signal|upper }}] = {{ prefix }}_handle_{{ handler.name|c_identifier }};
{% endfor %}
}

void {{ prefix }}_bitactor_tick({{ prefix }}_bitactor_t* ba) {
    uint64_t start_ticks = rdtsc();
    uint32_t head = ba->signal_head;
    uint32_t tail = ba->signal_tail;
    
    if (head != tail) {
        {{ prefix }}_signal_t* sig = &ba->signal_ring[tail];
        {{ prefix }}_handler_fn handler = ba->dispatch[sig->type];
        
        if (handler) {
            handler(sig, ba->scratch);
        }
        
        ba->signal_tail = (tail + 1) & ({{ prefix|upper }}_RING_SIZE - 1);
        ba->signal_count++;
    }
    
    uint64_t elapsed = rdtsc() - start_ticks;
    ba->tick_count += elapsed;
    
    /* Assert tick budget - disabled for benchmarks */
    #ifndef BENCHMARK_MODE
    assert(elapsed <= {{ prefix|upper }}_TICK_BUDGET);
    #endif
}

bool {{ prefix }}_bitactor_enqueue_signal({{ prefix }}_bitactor_t* ba, const {{ prefix }}_signal_t* sig) {
    uint32_t head = ba->signal_head;
    uint32_t next_head = (head + 1) & ({{ prefix|upper }}_RING_SIZE - 1);
    
    if (next_head == ba->signal_tail) {
        return false; /* Ring full */
    }
    
    ba->signal_ring[head] = *sig;
    ba->signal_head = next_head;
    return true;
}

/* Generated handler implementations */
{% for handler in handlers %}
void {{ prefix }}_handle_{{ handler.name|c_identifier }}({{ prefix }}_signal_t* sig, void* scratch) {
    /* {{ handler.description }} */
    {% if handler.tick_budget %}
    /* Tick budget: {{ handler.tick_budget }} */
    {% endif %}
    (void)sig; /* Suppress unused warning */
    (void)scratch; /* Suppress unused warning */
    
    {% for operation in handler.operations %}
    {{ operation }};
    {% endfor %}
}
{% endfor %}

#endif /* {{ prefix|upper }}_IMPLEMENTATION */