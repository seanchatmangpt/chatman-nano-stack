%%%-------------------------------------------------------------------
%%% @doc cns_forge BitActor Server
%%% Generated from CNS_Forge_8020 TTL ontology
%%% Ultra-low latency semantic signal processing
%%% @copyright 2025 CNS - Generated by Jinja AOT
%%%-------------------------------------------------------------------
-module(cns_forge_bitactor).
-behaviour(gen_server).

%% API
-export([start_link/0, stop/0]).
-export([send_signal/2, get_stats/0]).
-export([send_stimulus_http_request/1]).
-export([send_decode_params/1]).
-export([send_workflow_decision/1]).
-export([send_memory_operation/1]).
-export([send_actuation_response/1]).
-export([send_ttl_expired/1]).

%% gen_server callbacks
-export([init/1, handle_call/3, handle_cast/2, handle_info/2,
         terminate/2, code_change/3]).

-define(SERVER, ?MODULE).
-define(TICK_BUDGET, 8).

-record(state, {
    nif_state :: term(),
    stats = #{} :: map(),
    handlers = #{} :: map()
}).

-record(signal, {
    type :: atom(),
    payload :: term(),
    timestamp :: integer()
}).

%%%===================================================================
%%% API
%%%===================================================================

start_link() ->
    gen_server:start_link({local, ?SERVER}, ?MODULE, [], []).

stop() ->
    gen_server:stop(?SERVER).

-spec send_stimulus_http_request(term()) -> ok | {error, term()}.
send_stimulus_http_request(Payload) ->
    send_signal(stimulus_http_request, Payload).
-spec send_decode_params(term()) -> ok | {error, term()}.
send_decode_params(Payload) ->
    send_signal(decode_params, Payload).
-spec send_workflow_decision(term()) -> ok | {error, term()}.
send_workflow_decision(Payload) ->
    send_signal(workflow_decision, Payload).
-spec send_memory_operation(term()) -> ok | {error, term()}.
send_memory_operation(Payload) ->
    send_signal(memory_operation, Payload).
-spec send_actuation_response(term()) -> ok | {error, term()}.
send_actuation_response(Payload) ->
    send_signal(actuation_response, Payload).
-spec send_ttl_expired(term()) -> ok | {error, term()}.
send_ttl_expired(Payload) ->
    send_signal(ttl_expired, Payload).

-spec send_signal(atom(), term()) -> ok | {error, term()}.
send_signal(Type, Payload) ->
    Signal = #signal{
        type = Type,
        payload = Payload,
        timestamp = erlang:system_time(nanosecond)
    },
    gen_server:cast(?SERVER, {signal, Signal}).

-spec get_stats() -> map().
get_stats() ->
    gen_server:call(?SERVER, get_stats).

%%%===================================================================
%%% gen_server callbacks
%%%===================================================================

init([]) ->
    process_flag(trap_exit, true),
    
    %% Initialize NIF
    NIFState = cns_forge_nif:init(),
    
    %% Register handlers from TTL
    Handlers = #{
        pulse_log => fun handle_pulse_logger/2, 
        ttl_expired => fun handle_ttl_monitor/2
    },
    
    Stats = #{
        signals_processed => 0,
        start_time => erlang:system_time(millisecond)
    },
    
    {ok, #state{nif_state = NIFState, stats = Stats, handlers = Handlers}}.

handle_call(get_stats, _From, State) ->
    {reply, State#state.stats, State};

handle_call(_Request, _From, State) ->
    {reply, {error, unknown_request}, State}.

handle_cast({signal, Signal}, State) ->
    %% Ultra-fast signal dispatch
    NewState = case maps:find(Signal#signal.type, State#state.handlers) of
        {ok, Handler} ->
            process_signal(Handler, Signal, State);
        error ->
            State
    end,
    {noreply, NewState};

handle_cast(_Msg, State) ->
    {noreply, State}.

handle_info(_Info, State) ->
    {noreply, State}.

terminate(_Reason, _State) ->
    ok.

code_change(_OldVsn, State, _Extra) ->
    {ok, State}.

%%%===================================================================
%%% Internal functions
%%%===================================================================

process_signal(Handler, Signal, State) ->
    StartTime = erlang:monotonic_time(nanosecond),
    
    %% Execute handler with NIF acceleration
    Result = Handler(Signal, State#state.nif_state),
    
    EndTime = erlang:monotonic_time(nanosecond),
    Elapsed = EndTime - StartTime,
    
    %% Update stats
    Stats = State#state.stats,
    NewStats = Stats#{
        signals_processed => maps:get(signals_processed, Stats, 0) + 1,
        last_signal_time => Elapsed
    },
    
    %% Assert tick budget
    Elapsed < ?TICK_BUDGET orelse error({tick_budget_exceeded, Elapsed}),
    
    State#state{stats = NewStats}.

%% Handler: Universal observability pulse logging
handle_pulse_logger(Signal, NIFState) ->
    %% TTL-defined operations
    /* Log workflow step */,
    /* Emit OTEL metrics */,
    /* Update health score */,
    ok.
%% Handler: TTL expiration handling
handle_ttl_monitor(Signal, NIFState) ->
    %% TTL-defined operations
    /* Log TTL violation */,
    /* Trigger compensation */,
    /* Update failure metrics */,
    ok.
