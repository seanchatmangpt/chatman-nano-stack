"""
DSPy Signatures generated from Turtle ontology
Generated by ttl2dspy.py on 2025-07-24T08:52:14.011945

Ontology URI: 
Signatures generated: 13
"""

import dspy
from typing import Union

# Type aliases for better IDE support
Text = str
Number = Union[int, float]
Boolean = bool

__all__ = ["SensorSignature", "PLCSignature", "FailureSignature", "PressureSensorSignature", "StatisticalProcessControlSignature", "MachineSignature", "TemperatureSensorSignature", "MaintenanceEventSignature", "ManufacturingAssetSignature", "ControlSystemSignature", "ManufacturingProcessSignature", "VibrationSensorSignature", "QualityMeasurementSignature"]

class SensorSignature(dspy.Signature):
    """DSPy Signature for Sensor
    
    Generated from: http://cns.ai/ontology/industrial-iot#Sensor
    Timestamp: 2025-07-24T08:52:14.010045"""
    
    accuracy = dspy.InputField(desc="Measurement accuracy must be between 0.001% and 50%", dtype=float)
    processing_latency = dspy.InputField(desc="Sensor processing must complete within 1ms", dtype=float)
    sensor_id = dspy.InputField(desc="Sensor ID must be 4-64 alphanumeric characters", dtype=str)
    measurement_timestamp = dspy.InputField(desc="All sensor measurements must have a timestamp", dtype=str)
    sampling_rate = dspy.InputField(desc="Sampling rate must be between 0.1 Hz and 100 kHz", dtype=float)
    ticks_used = dspy.InputField(desc="Sensor processing must use ≤8 CPU ticks", dtype=int)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class PLCSignature(dspy.Signature):
    """DSPy Signature for PLC
    
    Generated from: http://cns.ai/ontology/industrial-iot#PLC
    Timestamp: 2025-07-24T08:52:14.010180"""
    
    response_time = dspy.InputField(desc="PLC response time must be ≤10ms for real-time control", dtype=float)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class FailureSignature(dspy.Signature):
    """DSPy Signature for Failure
    
    Generated from: http://cns.ai/ontology/industrial-iot#Failure
    Timestamp: 2025-07-24T08:52:14.010296"""
    
    failure_probability = dspy.InputField(desc="Failure probability must be between 0.0 and 1.0", dtype=float)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class PressureSensorSignature(dspy.Signature):
    """DSPy Signature for PressureSensor
    
    Generated from: http://cns.ai/ontology/industrial-iot#PressureSensor
    Timestamp: 2025-07-24T08:52:14.010411"""
    
    measurement_value = dspy.InputField(desc="Pressure must be non-negative and reasonable", dtype=float)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class StatisticalProcessControlSignature(dspy.Signature):
    """DSPy Signature for StatisticalProcessControl
    
    Generated from: http://cns.ai/ontology/industrial-iot#StatisticalProcessControl
    Timestamp: 2025-07-24T08:52:14.010524"""
    
    cpk_value = dspy.InputField(desc="Process capability index must be between 0.0 and 5.0", dtype=float)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class MachineSignature(dspy.Signature):
    """DSPy Signature for Machine
    
    Generated from: http://cns.ai/ontology/industrial-iot#Machine
    Timestamp: 2025-07-24T08:52:14.010769"""
    
    oee_score = dspy.InputField(desc="Overall Equipment Effectiveness must be between 0% and 100%", dtype=float)
    performance_rate = dspy.InputField(desc="Machine performance must be between 0% and 100%", dtype=float)
    operating_hours = dspy.InputField(desc="Operating hours must be non-negative and reasonable", dtype=float)
    mttr = dspy.InputField(desc="Mean Time To Repair must be positive and reasonable", dtype=float)
    mtbf = dspy.InputField(desc="Mean Time Between Failures must be positive and reasonable", dtype=float)
    utilization_rate = dspy.InputField(desc="Machine utilization must be between 0% and 100%", dtype=float)
    availability_rate = dspy.InputField(desc="Machine availability must be between 0% and 100%", dtype=float)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class TemperatureSensorSignature(dspy.Signature):
    """DSPy Signature for TemperatureSensor
    
    Generated from: http://cns.ai/ontology/industrial-iot#TemperatureSensor
    Timestamp: 2025-07-24T08:52:14.010930"""
    
    alarm_threshold_low = dspy.InputField(desc="Low temperature alarm must be reasonable", dtype=float)
    alarm_threshold_high = dspy.InputField(desc="High temperature alarm must be reasonable", dtype=float)
    measurement_value = dspy.InputField(desc="Temperature must be above absolute zero and reasonable", dtype=float)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class MaintenanceEventSignature(dspy.Signature):
    """DSPy Signature for MaintenanceEvent
    
    Generated from: http://cns.ai/ontology/industrial-iot#MaintenanceEvent
    Timestamp: 2025-07-24T08:52:14.011086"""
    
    maintenance_cost = dspy.InputField(desc="Maintenance cost must be non-negative and reasonable", dtype=float)
    maintenance_type = dspy.InputField(desc="Maintenance type must be from approved list", dtype=str)
    maintenance_duration = dspy.InputField(desc="Maintenance duration must be reasonable", dtype=float)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class ManufacturingAssetSignature(dspy.Signature):
    """DSPy Signature for ManufacturingAsset
    
    Generated from: http://cns.ai/ontology/industrial-iot#ManufacturingAsset
    Timestamp: 2025-07-24T08:52:14.011252"""
    
    criticality = dspy.InputField(desc="Asset criticality must be rated 1-10", dtype=int)
    operational_status = dspy.InputField(desc="Operational status must be from approved list", dtype=str)
    asset_type = dspy.InputField(desc="All assets must have a defined type", dtype=str)
    asset_id = dspy.InputField(desc="Asset ID must be 4-32 alphanumeric characters", dtype=str)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class ControlSystemSignature(dspy.Signature):
    """DSPy Signature for ControlSystem
    
    Generated from: http://cns.ai/ontology/industrial-iot#ControlSystem
    Timestamp: 2025-07-24T08:52:14.011407"""
    
    response_time = dspy.InputField(desc="Control system response time must be ≤100ms", dtype=float)
    control_accuracy = dspy.InputField(desc="Control accuracy must be ≥90%", dtype=float)
    real_time_optimization = dspy.InputField(desc="Control systems must have real-time optimization enabled", dtype=bool)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class ManufacturingProcessSignature(dspy.Signature):
    """DSPy Signature for ManufacturingProcess
    
    Generated from: http://cns.ai/ontology/industrial-iot#ManufacturingProcess
    Timestamp: 2025-07-24T08:52:14.011648"""
    
    cycle_time = dspy.InputField(desc="Process cycle time must be between 0.1s and 24 hours", dtype=float)
    yield_rate = dspy.InputField(desc="Process yield rate must be between 0% and 100%", dtype=float)
    energy_consumption = dspy.InputField(desc="Energy consumption must be non-negative and reasonable", dtype=float)
    efficiency = dspy.InputField(desc="Process efficiency must be between 0% and 100%", dtype=float)
    setup_time = dspy.InputField(desc="Process setup time must be non-negative and reasonable", dtype=float)
    process_id = dspy.InputField(desc="Process ID must be 4-64 alphanumeric characters", dtype=str)
    throughput = dspy.InputField(desc="Process throughput must be positive and reasonable", dtype=float)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class VibrationSensorSignature(dspy.Signature):
    """DSPy Signature for VibrationSensor
    
    Generated from: http://cns.ai/ontology/industrial-iot#VibrationSensor
    Timestamp: 2025-07-24T08:52:14.011784"""
    
    sampling_rate = dspy.InputField(desc="Vibration sensors require high sampling rates", dtype=float)
    measurement_value = dspy.InputField(desc="Vibration measurement must be non-negative and reasonable", dtype=float)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class QualityMeasurementSignature(dspy.Signature):
    """DSPy Signature for QualityMeasurement
    
    Generated from: http://cns.ai/ontology/industrial-iot#QualityMeasurement
    Timestamp: 2025-07-24T08:52:14.011936"""
    
    defect_rate = dspy.InputField(desc="Defect rate must be between 0% and 100%", dtype=float)
    quality_score = dspy.InputField(desc="Quality score must be between 0.0 and 10.0", dtype=float)
    inspection_result = dspy.InputField(desc="Inspection result must be from approved list", dtype=str)
    result = dspy.OutputField(desc="Generated result", dtype=str)


# Auto-generated signature registry
SIGNATURES = {
    "SensorSignature": SensorSignature,
    "PLCSignature": PLCSignature,
    "FailureSignature": FailureSignature,
    "PressureSensorSignature": PressureSensorSignature,
    "StatisticalProcessControlSignature": StatisticalProcessControlSignature,
    "MachineSignature": MachineSignature,
    "TemperatureSensorSignature": TemperatureSensorSignature,
    "MaintenanceEventSignature": MaintenanceEventSignature,
    "ManufacturingAssetSignature": ManufacturingAssetSignature,
    "ControlSystemSignature": ControlSystemSignature,
    "ManufacturingProcessSignature": ManufacturingProcessSignature,
    "VibrationSensorSignature": VibrationSensorSignature,
    "QualityMeasurementSignature": QualityMeasurementSignature,
}

def get_signature(name: str) -> dspy.Signature:
    """Get signature by name"""
    if name not in SIGNATURES:
        raise ValueError(f"Unknown signature: {name}. Available: {list(SIGNATURES.keys())}")
    return SIGNATURES[name]

def list_signatures() -> list:
    """List all available signature names"""
    return list(SIGNATURES.keys())
