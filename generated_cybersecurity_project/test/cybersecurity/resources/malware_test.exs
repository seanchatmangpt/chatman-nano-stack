defmodule Cybersecurity.Resources.MalwareTest do
  use ExUnit.Case, async: true
  
  alias Cybersecurity.Resources.Malware
  alias Cybersecurity.TestHelper

  setup do
    TestHelper.start_sandbox()
    on_exit(&TestHelper.stop_sandbox/0)
  end

  describe "create action" do
    test "creates malware with valid attributes" do
      attrs = %{
        name: "Test Malware",
        description: "Test description",
        status: :active
      }
      
      assert {:ok, malware} = Ash.create(Malware, attrs)
      assert malware.name == "Test Malware"
      assert malware.status == :active
    end
    
    test "fails with invalid attributes" do
      attrs = %{description: "Missing name"}
      
      assert {:error, %Ash.Error.Invalid{}} = Ash.create(Malware, attrs)
    end
  end

  describe "read action" do
    test "reads existing malware" do
      malware = TestHelper.create_test_data(Malware)
      
      assert {:ok, found_malware} = Ash.get(Malware, malware.id)
      assert found_malware.id == malware.id
    end
    
    test "lists all malwares" do
      TestHelper.create_test_data(Malware, %{name: "Malware 1"})
      TestHelper.create_test_data(Malware, %{name: "Malware 2"})
      
      assert {:ok, malwares} = Ash.read(Malware)
      assert length(malwares) >= 2
    end
    
    test "filters by status" do
      active_malware = TestHelper.create_test_data(Malware, %{status: :active})
      _inactive_malware = TestHelper.create_test_data(Malware, %{status: :inactive})
      
      assert {:ok, [malware]} = Ash.read(Malware, action: :by_status, status: :active)
      assert malware.id == active_malware.id
    end
  end

  describe "update action" do
    test "updates malware attributes" do
      malware = TestHelper.create_test_data(Malware)
      
      assert {:ok, updated_malware} = Ash.update(malware, %{name: "Updated Name"})
      assert updated_malware.name == "Updated Name"
    end
    
    test "activates malware" do
      malware = TestHelper.create_test_data(Malware, %{status: :inactive})
      
      assert {:ok, activated_malware} = Ash.update(malware, action: :activate)
      assert activated_malware.status == :active
    end
  end

  describe "destroy action" do
    test "destroys existing malware" do
      malware = TestHelper.create_test_data(Malware)
      
      assert :ok = Ash.destroy(malware)
      assert {:error, %Ash.Error.Invalid{}} = Ash.get(Malware, malware.id)
    end
  end
end
