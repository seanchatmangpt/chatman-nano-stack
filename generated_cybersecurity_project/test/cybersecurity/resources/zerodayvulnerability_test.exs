defmodule Cybersecurity.Resources.ZeroDayVulnerabilityTest do
  use ExUnit.Case, async: true
  
  alias Cybersecurity.Resources.ZeroDayVulnerability
  alias Cybersecurity.TestHelper

  setup do
    TestHelper.start_sandbox()
    on_exit(&TestHelper.stop_sandbox/0)
  end

  describe "create action" do
    test "creates zerodayvulnerability with valid attributes" do
      attrs = %{
        name: "Test ZeroDayVulnerability",
        description: "Test description",
        status: :active
      }
      
      assert {:ok, zerodayvulnerability} = Ash.create(ZeroDayVulnerability, attrs)
      assert zerodayvulnerability.name == "Test ZeroDayVulnerability"
      assert zerodayvulnerability.status == :active
    end
    
    test "fails with invalid attributes" do
      attrs = %{description: "Missing name"}
      
      assert {:error, %Ash.Error.Invalid{}} = Ash.create(ZeroDayVulnerability, attrs)
    end
  end

  describe "read action" do
    test "reads existing zerodayvulnerability" do
      zerodayvulnerability = TestHelper.create_test_data(ZeroDayVulnerability)
      
      assert {:ok, found_zerodayvulnerability} = Ash.get(ZeroDayVulnerability, zerodayvulnerability.id)
      assert found_zerodayvulnerability.id == zerodayvulnerability.id
    end
    
    test "lists all zerodayvulnerabilitys" do
      TestHelper.create_test_data(ZeroDayVulnerability, %{name: "ZeroDayVulnerability 1"})
      TestHelper.create_test_data(ZeroDayVulnerability, %{name: "ZeroDayVulnerability 2"})
      
      assert {:ok, zerodayvulnerabilitys} = Ash.read(ZeroDayVulnerability)
      assert length(zerodayvulnerabilitys) >= 2
    end
    
    test "filters by status" do
      active_zerodayvulnerability = TestHelper.create_test_data(ZeroDayVulnerability, %{status: :active})
      _inactive_zerodayvulnerability = TestHelper.create_test_data(ZeroDayVulnerability, %{status: :inactive})
      
      assert {:ok, [zerodayvulnerability]} = Ash.read(ZeroDayVulnerability, action: :by_status, status: :active)
      assert zerodayvulnerability.id == active_zerodayvulnerability.id
    end
  end

  describe "update action" do
    test "updates zerodayvulnerability attributes" do
      zerodayvulnerability = TestHelper.create_test_data(ZeroDayVulnerability)
      
      assert {:ok, updated_zerodayvulnerability} = Ash.update(zerodayvulnerability, %{name: "Updated Name"})
      assert updated_zerodayvulnerability.name == "Updated Name"
    end
    
    test "activates zerodayvulnerability" do
      zerodayvulnerability = TestHelper.create_test_data(ZeroDayVulnerability, %{status: :inactive})
      
      assert {:ok, activated_zerodayvulnerability} = Ash.update(zerodayvulnerability, action: :activate)
      assert activated_zerodayvulnerability.status == :active
    end
  end

  describe "destroy action" do
    test "destroys existing zerodayvulnerability" do
      zerodayvulnerability = TestHelper.create_test_data(ZeroDayVulnerability)
      
      assert :ok = Ash.destroy(zerodayvulnerability)
      assert {:error, %Ash.Error.Invalid{}} = Ash.get(ZeroDayVulnerability, zerodayvulnerability.id)
    end
  end
end
