defmodule Cybersecurity.Resources.VulnerabilityTest do
  use ExUnit.Case, async: true
  
  alias Cybersecurity.Resources.Vulnerability
  alias Cybersecurity.TestHelper

  setup do
    TestHelper.start_sandbox()
    on_exit(&TestHelper.stop_sandbox/0)
  end

  describe "create action" do
    test "creates vulnerability with valid attributes" do
      attrs = %{
        name: "Test Vulnerability",
        description: "Test description",
        status: :active
      }
      
      assert {:ok, vulnerability} = Ash.create(Vulnerability, attrs)
      assert vulnerability.name == "Test Vulnerability"
      assert vulnerability.status == :active
    end
    
    test "fails with invalid attributes" do
      attrs = %{description: "Missing name"}
      
      assert {:error, %Ash.Error.Invalid{}} = Ash.create(Vulnerability, attrs)
    end
  end

  describe "read action" do
    test "reads existing vulnerability" do
      vulnerability = TestHelper.create_test_data(Vulnerability)
      
      assert {:ok, found_vulnerability} = Ash.get(Vulnerability, vulnerability.id)
      assert found_vulnerability.id == vulnerability.id
    end
    
    test "lists all vulnerabilitys" do
      TestHelper.create_test_data(Vulnerability, %{name: "Vulnerability 1"})
      TestHelper.create_test_data(Vulnerability, %{name: "Vulnerability 2"})
      
      assert {:ok, vulnerabilitys} = Ash.read(Vulnerability)
      assert length(vulnerabilitys) >= 2
    end
    
    test "filters by status" do
      active_vulnerability = TestHelper.create_test_data(Vulnerability, %{status: :active})
      _inactive_vulnerability = TestHelper.create_test_data(Vulnerability, %{status: :inactive})
      
      assert {:ok, [vulnerability]} = Ash.read(Vulnerability, action: :by_status, status: :active)
      assert vulnerability.id == active_vulnerability.id
    end
  end

  describe "update action" do
    test "updates vulnerability attributes" do
      vulnerability = TestHelper.create_test_data(Vulnerability)
      
      assert {:ok, updated_vulnerability} = Ash.update(vulnerability, %{name: "Updated Name"})
      assert updated_vulnerability.name == "Updated Name"
    end
    
    test "activates vulnerability" do
      vulnerability = TestHelper.create_test_data(Vulnerability, %{status: :inactive})
      
      assert {:ok, activated_vulnerability} = Ash.update(vulnerability, action: :activate)
      assert activated_vulnerability.status == :active
    end
  end

  describe "destroy action" do
    test "destroys existing vulnerability" do
      vulnerability = TestHelper.create_test_data(Vulnerability)
      
      assert :ok = Ash.destroy(vulnerability)
      assert {:error, %Ash.Error.Invalid{}} = Ash.get(Vulnerability, vulnerability.id)
    end
  end
end
