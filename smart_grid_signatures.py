"""
DSPy Signatures generated from Turtle ontology
Generated by ttl2dspy.py on 2025-07-24T08:34:53.736564

Ontology URI: 
Signatures generated: 15
"""

import dspy
from typing import Union

# Type aliases for better IDE support
Text = str
Number = Union[int, float]
Boolean = bool

__all__ = ["GridEventSignature", "TransmissionLineSignature", "GridControllerSignature", "FrequencyMeasurementSignature", "SolarPowerPlantSignature", "EnergyConsumerSignature", "PowerPlantSignature", "ElectricalMeasurementSignature", "RenewablePowerPlantSignature", "VoltageMeasurementSignature", "GridNodeSignature", "WindPowerPlantSignature", "CurrentMeasurementSignature", "EnergyStorageSignature", "OutageSignature"]

class GridEventSignature(dspy.Signature):
    """DSPy Signature for GridEvent
    
    Generated from: http://cns.ai/ontology/smart-grid#GridEvent
    Timestamp: 2025-07-24T08:34:53.734378"""
    
    event_timestamp = dspy.InputField(desc="All events must have a timestamp", dtype=str)
    event_severity = dspy.InputField(desc="Event severity must be rated 1-10", dtype=int)
    event_duration = dspy.InputField(desc="Event duration must be non-negative", dtype=float)
    recovery_time = dspy.InputField(desc="Recovery time must be between 0 and 24 hours", dtype=float)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class TransmissionLineSignature(dspy.Signature):
    """DSPy Signature for TransmissionLine
    
    Generated from: http://cns.ai/ontology/smart-grid#TransmissionLine
    Timestamp: 2025-07-24T08:34:53.734561"""
    
    line_impedance = dspy.InputField(desc="Line impedance must be between 1mΩ and 1kΩ", dtype=float)
    thermal_rating = dspy.InputField(desc="Thermal rating must be between 100A and 10kA", dtype=float)
    line_length = dspy.InputField(desc="Line length must be between 0.1 and 1000 km", dtype=float)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class GridControllerSignature(dspy.Signature):
    """DSPy Signature for GridController
    
    Generated from: http://cns.ai/ontology/smart-grid#GridController
    Timestamp: 2025-07-24T08:34:53.734749"""
    
    control_accuracy = dspy.InputField(desc="Control accuracy must be ≥95%", dtype=float)
    control_mode = dspy.InputField(desc="Control mode must be from approved list", dtype=str)
    real_time_processing = dspy.InputField(desc="Grid controllers must have real-time processing enabled", dtype=bool)
    response_time = dspy.InputField(desc="Control response time must be ≤100ms", dtype=float)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class FrequencyMeasurementSignature(dspy.Signature):
    """DSPy Signature for FrequencyMeasurement
    
    Generated from: http://cns.ai/ontology/smart-grid#FrequencyMeasurement
    Timestamp: 2025-07-24T08:34:53.734867"""
    
    measurement_value = dspy.InputField(desc="Frequency measurements must be between 45 and 65 Hz", dtype=float)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class SolarPowerPlantSignature(dspy.Signature):
    """DSPy Signature for SolarPowerPlant
    
    Generated from: http://cns.ai/ontology/smart-grid#SolarPowerPlant
    Timestamp: 2025-07-24T08:34:53.734982"""
    
    solar_irradiance = dspy.InputField(desc="Solar irradiance must be between 0 and 1400 W/m²", dtype=float)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class EnergyConsumerSignature(dspy.Signature):
    """DSPy Signature for EnergyConsumer
    
    Generated from: http://cns.ai/ontology/smart-grid#EnergyConsumer
    Timestamp: 2025-07-24T08:34:53.735137"""
    
    current_demand = dspy.InputField(desc="Current demand must be non-negative", dtype=float)
    flexibility_factor = dspy.InputField(desc="Flexibility factor must be between 0 and 1", dtype=float)
    priority_level = dspy.InputField(desc="Priority level must be between 1 and 10", dtype=int)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class PowerPlantSignature(dspy.Signature):
    """DSPy Signature for PowerPlant
    
    Generated from: http://cns.ai/ontology/smart-grid#PowerPlant
    Timestamp: 2025-07-24T08:34:53.735296"""
    
    current_power = dspy.InputField(desc="Current power must be non-negative", dtype=float)
    max_power = dspy.InputField(desc="Maximum power must be between 100kW and 10GW", dtype=float)
    efficiency = dspy.InputField(desc="Efficiency must be between 10% and 100%", dtype=float)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class ElectricalMeasurementSignature(dspy.Signature):
    """DSPy Signature for ElectricalMeasurement
    
    Generated from: http://cns.ai/ontology/smart-grid#ElectricalMeasurement
    Timestamp: 2025-07-24T08:34:53.735522"""
    
    sampling_rate = dspy.InputField(desc="Sampling rate must be between 1 Hz and 10 kHz", dtype=float)
    measurement_timestamp = dspy.InputField(desc="All measurements must have a timestamp", dtype=str)
    ticks_used = dspy.InputField(desc="Measurement processing must use ≤8 CPU ticks", dtype=int)
    processing_latency = dspy.InputField(desc="Measurement processing must complete within 1ms", dtype=float)
    measurement_accuracy = dspy.InputField(desc="Measurement accuracy must be between 0.1% and 5%", dtype=float)
    measurement_value = dspy.InputField(desc="All measurements must have a numeric value", dtype=float)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class RenewablePowerPlantSignature(dspy.Signature):
    """DSPy Signature for RenewablePowerPlant
    
    Generated from: http://cns.ai/ontology/smart-grid#RenewablePowerPlant
    Timestamp: 2025-07-24T08:34:53.735656"""
    
    weather_condition = dspy.InputField(desc="Weather condition must be from approved list", dtype=str)
    carbon_emission_factor = dspy.InputField(desc="Renewable plants must have low carbon emissions", dtype=float)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class VoltageMeasurementSignature(dspy.Signature):
    """DSPy Signature for VoltageMeasurement
    
    Generated from: http://cns.ai/ontology/smart-grid#VoltageMeasurement
    Timestamp: 2025-07-24T08:34:53.735770"""
    
    measurement_value = dspy.InputField(desc="Voltage measurements must be between 0 and 1000kV", dtype=float)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class GridNodeSignature(dspy.Signature):
    """DSPy Signature for GridNode
    
    Generated from: http://cns.ai/ontology/smart-grid#GridNode
    Timestamp: 2025-07-24T08:34:53.735991"""
    
    total_harmonic_distortion = dspy.InputField(desc="Total Harmonic Distortion must be below 8%", dtype=float)
    grid_node_id = dspy.InputField(desc="Grid node ID must be 4-32 alphanumeric characters", dtype=str)
    nominal_voltage = dspy.InputField(desc="Nominal voltage must be between 0.1kV and 800kV", dtype=float)
    grid_frequency = dspy.InputField(desc="Grid frequency must be within ±1% of nominal (50Hz)", dtype=float)
    voltage_stability = dspy.InputField(desc="Voltage stability index must be between 0 and 1", dtype=float)
    operational_status = dspy.InputField(desc="Operational status must be from approved list", dtype=str)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class WindPowerPlantSignature(dspy.Signature):
    """DSPy Signature for WindPowerPlant
    
    Generated from: http://cns.ai/ontology/smart-grid#WindPowerPlant
    Timestamp: 2025-07-24T08:34:53.736130"""
    
    wind_speed = dspy.InputField(desc="Wind speed must be between 0 and 100 m/s", dtype=float)
    wind_direction = dspy.InputField(desc="Wind direction must be between 0 and 360 degrees", dtype=float)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class CurrentMeasurementSignature(dspy.Signature):
    """DSPy Signature for CurrentMeasurement
    
    Generated from: http://cns.ai/ontology/smart-grid#CurrentMeasurement
    Timestamp: 2025-07-24T08:34:53.736244"""
    
    measurement_value = dspy.InputField(desc="Current measurements must be between 0 and 50kA", dtype=float)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class EnergyStorageSignature(dspy.Signature):
    """DSPy Signature for EnergyStorage
    
    Generated from: http://cns.ai/ontology/smart-grid#EnergyStorage
    Timestamp: 2025-07-24T08:34:53.736422"""
    
    charging_mode = dspy.InputField(desc="Charging mode must be from approved list", dtype=str)
    round_trip_efficiency = dspy.InputField(desc="Round-trip efficiency must be between 50% and 98%", dtype=float)
    current_state_of_charge = dspy.InputField(desc="State of charge must be between 0% and 100%", dtype=float)
    storage_capacity = dspy.InputField(desc="Storage capacity must be between 100kWh and 10GWh", dtype=float)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class OutageSignature(dspy.Signature):
    """DSPy Signature for Outage
    
    Generated from: http://cns.ai/ontology/smart-grid#Outage
    Timestamp: 2025-07-24T08:34:53.736555"""
    
    event_severity = dspy.InputField(desc="Outages must have severity 5-10", dtype=int)
    affected_nodes = dspy.InputField(desc="Outages must affect at least one node", dtype=int)
    result = dspy.OutputField(desc="Generated result", dtype=str)


# Auto-generated signature registry
SIGNATURES = {
    "GridEventSignature": GridEventSignature,
    "TransmissionLineSignature": TransmissionLineSignature,
    "GridControllerSignature": GridControllerSignature,
    "FrequencyMeasurementSignature": FrequencyMeasurementSignature,
    "SolarPowerPlantSignature": SolarPowerPlantSignature,
    "EnergyConsumerSignature": EnergyConsumerSignature,
    "PowerPlantSignature": PowerPlantSignature,
    "ElectricalMeasurementSignature": ElectricalMeasurementSignature,
    "RenewablePowerPlantSignature": RenewablePowerPlantSignature,
    "VoltageMeasurementSignature": VoltageMeasurementSignature,
    "GridNodeSignature": GridNodeSignature,
    "WindPowerPlantSignature": WindPowerPlantSignature,
    "CurrentMeasurementSignature": CurrentMeasurementSignature,
    "EnergyStorageSignature": EnergyStorageSignature,
    "OutageSignature": OutageSignature,
}

def get_signature(name: str) -> dspy.Signature:
    """Get signature by name"""
    if name not in SIGNATURES:
        raise ValueError(f"Unknown signature: {name}. Available: {list(SIGNATURES.keys())}")
    return SIGNATURES[name]

def list_signatures() -> list:
    """List all available signature names"""
    return list(SIGNATURES.keys())
