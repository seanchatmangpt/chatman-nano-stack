[project]
name = "cns"
version = "8.0.0"
description = "Computational Narrative System - Semantic AOT Compiler for UHFT Trading Systems"
authors = [
    { name = "James I. Chatman", email = "james@chatman.ai" },
    { name = "Sean A. Chatman", email = "sean@chatman.ai" },
]
readme = "README.md"
license = { text = "Proprietary" }
requires-python = ">=3.8"
keywords = ["semantic-web", "ontology", "trading", "uhft", "aot-compiler", "owl", "ttl", "c-codegen"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Financial and Insurance Industry",
    "Intended Audience :: Developers",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Software Development :: Compilers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # Core semantic processing
    "rdflib>=7.0.0",
    "rdflib-jsonld>=0.6.2",
    
    # Template engine for C code generation
    "jinja2>=3.1.0",
    
    # DSPy integration for neural reasoning
    "dspy-ai>=2.4.0",
    
    # Performance and monitoring  
    "opentelemetry-api>=1.12.0",
    "opentelemetry-sdk>=1.12.0",
    
    # Development and testing
    "pytest>=7.0.0",
    "pytest-benchmark>=4.0.0",
    "pytest-cov>=4.0.0",
    
    # Type checking and linting
    "mypy>=1.5.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    
    # Configuration and CLI
    "pydantic>=2.0.0",
    "typer>=0.9.0",
    "rich>=13.0.0",
    "psutil>=5.9.0",
    
    # Data processing
    "pyyaml>=6.0.0",
    "toml>=0.10.2",
]

[project.optional-dependencies]
dev = [
    "pre-commit>=3.0.0",
    "tox>=4.0.0",
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
]

benchmark = [
    "psutil>=5.9.0",
    "memory-profiler>=0.61.0",
    "py-spy>=0.3.14",
]

trading = [
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "scipy>=1.10.0",
]

[project.urls]
Homepage = "https://github.com/chatmangpt/cns"
Documentation = "https://cns.chatman.ai/docs"
Repository = "https://github.com/chatmangpt/cns.git"
Issues = "https://github.com/chatmangpt/cns/issues"

[project.scripts]
cns-compile = "owl_compiler:main"
cns-benchmark = "run_benchmark:main"
cns-validate = "aot_lifecycle:main"
cns-status = "cns_status:main"
ttl2dspy = "ttl2dspy:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = [
    "src/cns",
    "ontologies",
    "generated_c",
]

[tool.uv]
dev-dependencies = [
    "pre-commit>=3.0.0",
    "pytest>=7.0.0",
    "pytest-benchmark>=4.0.0",
    "mypy>=1.5.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
]

[tool.uv.workspace]
members = [
    "hyperintel-ttl2dspy",
]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | generated_c
  | v8/include
)/
'''

[tool.ruff]
line-length = 100
target-version = "py38"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "generated_c",
    "v8/include",
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"test_*.py" = ["B011"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "rdflib.*",
    "dspy.*",
    "opentelemetry.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
    "owl_compiler_tests",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "benchmark: marks tests as benchmark tests",
    "uhft: marks tests as ultra-high-frequency trading specific",
]

[tool.coverage.run]
source = [
    "owl_compiler",
    "ttl2dspy", 
    "aot_lifecycle",
    "run_benchmark",
]
omit = [
    "*/tests/*",
    "*/test_*",
    "generated_c/*",
    "v8/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
