"""
DSPy Signatures generated from Turtle ontology
Generated by ttl2dspy.py on 2025-07-23T21:23:15.026166

Ontology URI: 
Signatures generated: 13
"""

import dspy
from typing import Union

# Type aliases for better IDE support
Text = str
Number = Union[int, float]
Boolean = bool

__all__ = ["SignalSignature", "HandlerSignature", "ValidationSignalSignature", "EngineSignature", "SPARQLQuerySignature", "ExecutionResultSignature", "SemanticHandlerSignature", "OptimizedHandlerSignature", "SemanticSignalSignature", "CachedQuerySignature", "QuerySignalSignature", "MemoryPoolSignature", "TickBudgetSignature"]

class SignalSignature(dspy.Signature):
    """DSPy Signature for Signal
    
    Generated from: http://bitactor.org/ontology#Signal
    Timestamp: 2025-07-23T21:23:15.024821"""
    
    has_id = dspy.InputField(desc="hasId property", dtype=str)
    has_timestamp = dspy.InputField(desc="hasTimestamp property", dtype=str)
    has_priority = dspy.InputField(desc="hasPriority property", dtype=str)
    has_payload = dspy.InputField(desc="hasPayload property", dtype=str)
    has_type = dspy.InputField(desc="hasType property", dtype=str)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class HandlerSignature(dspy.Signature):
    """DSPy Signature for Handler
    
    Generated from: http://bitactor.org/ontology#Handler
    Timestamp: 2025-07-23T21:23:15.024994"""
    
    has_hash = dspy.InputField(desc="hasHash property", dtype=str)
    has_tick_budget = dspy.InputField(desc="hasTickBudget property", dtype=str)
    vectorizable = dspy.InputField(desc="vectorizable property", dtype=bool)
    batch_size = dspy.InputField(desc="batchSize property", dtype=str)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class ValidationSignalSignature(dspy.Signature):
    """DSPy Signature for ValidationSignal
    
    Generated from: http://bitactor.org/ontology#ValidationSignal
    Timestamp: 2025-07-23T21:23:15.025089"""
    
    has_shape = dspy.InputField(desc="hasShape property", dtype=str)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class EngineSignature(dspy.Signature):
    """DSPy Signature for Engine
    
    Generated from: http://bitactor.org/ontology#Engine
    Timestamp: 2025-07-23T21:23:15.025226"""
    
    has_triple_store = dspy.InputField(desc="hasTripleStore property", dtype=str)
    max_signals = dspy.InputField(desc="maxSignals property", dtype=str)
    dispatch_table_size = dspy.InputField(desc="dispatchTableSize property", dtype=str)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class SPARQLQuerySignature(dspy.Signature):
    """DSPy Signature for SPARQLQuery
    
    Generated from: http://bitactor.org/ontology#SPARQLQuery
    Timestamp: 2025-07-23T21:23:15.025319"""
    
    query_complexity = dspy.InputField(desc="queryComplexity property", dtype=str)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class ExecutionResultSignature(dspy.Signature):
    """DSPy Signature for ExecutionResult
    
    Generated from: http://bitactor.org/ontology#ExecutionResult
    Timestamp: 2025-07-23T21:23:15.025457"""
    
    has_trace_id = dspy.InputField(desc="hasTraceId property", dtype=str)
    execution_status = dspy.InputField(desc="executionStatus property", dtype=str)
    actual_ticks = dspy.InputField(desc="actualTicks property", dtype=str)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class SemanticHandlerSignature(dspy.Signature):
    """DSPy Signature for SemanticHandler
    
    Generated from: http://bitactor.org/ontology#SemanticHandler
    Timestamp: 2025-07-23T21:23:15.025547"""
    
    vectorizable = dspy.InputField(desc="vectorizable property", dtype=str)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class OptimizedHandlerSignature(dspy.Signature):
    """DSPy Signature for OptimizedHandler
    
    Generated from: http://bitactor.org/ontology#OptimizedHandler
    Timestamp: 2025-07-23T21:23:15.025635"""
    
    has_tick_budget = dspy.InputField(desc="hasTickBudget property", dtype=str)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class SemanticSignalSignature(dspy.Signature):
    """DSPy Signature for SemanticSignal
    
    Generated from: http://bitactor.org/ontology#SemanticSignal
    Timestamp: 2025-07-23T21:23:15.025772"""
    
    has_object = dspy.InputField(desc="hasObject property", dtype=str)
    has_predicate = dspy.InputField(desc="hasPredicate property", dtype=str)
    has_subject = dspy.InputField(desc="hasSubject property", dtype=str)
    has_semantic_context = dspy.InputField(desc="hasSemanticContext property", dtype=str)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class CachedQuerySignature(dspy.Signature):
    """DSPy Signature for CachedQuery
    
    Generated from: http://bitactor.org/ontology#CachedQuery
    Timestamp: 2025-07-23T21:23:15.025861"""
    
    query_complexity = dspy.InputField(desc="queryComplexity property", dtype=str)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class QuerySignalSignature(dspy.Signature):
    """DSPy Signature for QuerySignal
    
    Generated from: http://bitactor.org/ontology#QuerySignal
    Timestamp: 2025-07-23T21:23:15.025948"""
    
    has_query = dspy.InputField(desc="hasQuery property", dtype=str)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class MemoryPoolSignature(dspy.Signature):
    """DSPy Signature for MemoryPool
    
    Generated from: http://bitactor.org/ontology#MemoryPool
    Timestamp: 2025-07-23T21:23:15.026065"""
    
    pool_size = dspy.InputField(desc="poolSize property", dtype=str)
    alignment_bytes = dspy.InputField(desc="alignmentBytes property", dtype=str)
    result = dspy.OutputField(desc="Generated result", dtype=str)

class TickBudgetSignature(dspy.Signature):
    """DSPy Signature for TickBudget
    
    Generated from: http://bitactor.org/ontology#TickBudget
    Timestamp: 2025-07-23T21:23:15.026159"""
    
    tick_limit = dspy.InputField(desc="tickLimit property", dtype=str)
    result = dspy.OutputField(desc="Generated result", dtype=str)


# Auto-generated signature registry
SIGNATURES = {
    "SignalSignature": SignalSignature,
    "HandlerSignature": HandlerSignature,
    "ValidationSignalSignature": ValidationSignalSignature,
    "EngineSignature": EngineSignature,
    "SPARQLQuerySignature": SPARQLQuerySignature,
    "ExecutionResultSignature": ExecutionResultSignature,
    "SemanticHandlerSignature": SemanticHandlerSignature,
    "OptimizedHandlerSignature": OptimizedHandlerSignature,
    "SemanticSignalSignature": SemanticSignalSignature,
    "CachedQuerySignature": CachedQuerySignature,
    "QuerySignalSignature": QuerySignalSignature,
    "MemoryPoolSignature": MemoryPoolSignature,
    "TickBudgetSignature": TickBudgetSignature,
}

def get_signature(name: str) -> dspy.Signature:
    """Get signature by name"""
    if name not in SIGNATURES:
        raise ValueError(f"Unknown signature: {name}. Available: {list(SIGNATURES.keys())}")
    return SIGNATURES[name]

def list_signatures() -> list:
    """List all available signature names"""
    return list(SIGNATURES.keys())
