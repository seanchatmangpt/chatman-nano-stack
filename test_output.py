"""
DSPy Signatures generated from Turtle ontology
Generated by ttl2dspy.py on 2025-07-24T18:41:25.639626

Ontology URI: 
Signatures generated: 3
"""

import dspy
from typing import Union

# Type aliases for better IDE support
Text = str
Number = Union[int, float]
Boolean = bool

__all__ = ["MarketDataSignature", "MatchingEngineSignature", "OrderSignature"]

class MarketDataSignature(dspy.Signature):
    """Real-time market data feed
    
    Generated from: http://cns.io/uhft#MarketData
    Timestamp: 2025-07-24T18:41:25.639361"""
    
    market_volume = dspy.InputField(desc="Trading volume", dtype=int)
    market_price = dspy.InputField(desc="Current market price", dtype=float)
    market_trend = dspy.OutputField(desc="OUTPUT: Market trend prediction (BULLISH/BEARISH/NEUTRAL)", dtype=str)

class MatchingEngineSignature(dspy.Signature):
    """Ultra-low-latency order matching engine
    
    Generated from: http://cns.io/uhft#MatchingEngine
    Timestamp: 2025-07-24T18:41:25.639501"""
    
    position_size = dspy.InputField(desc="Current position size", dtype=float)
    portfolio_value = dspy.InputField(desc="Total portfolio value", dtype=float)
    volatility_measure = dspy.InputField(desc="Market volatility measure", dtype=float)
    risk_score = dspy.OutputField(desc="OUTPUT: Risk assessment score", dtype=int)

class OrderSignature(dspy.Signature):
    """Represents a trading order with 8-tick execution guarantee
    
    Generated from: http://cns.io/uhft#Order
    Timestamp: 2025-07-24T18:41:25.639619"""
    
    order_quantity = dspy.InputField(desc="Number of shares/units to trade", dtype=int)
    order_timestamp = dspy.InputField(desc="Order timestamp in nanoseconds", dtype=int)
    order_price = dspy.InputField(desc="Order price for execution", dtype=float)
    execution_decision = dspy.OutputField(desc="OUTPUT: Execution decision (BUY/SELL/HOLD)", dtype=str)


# Auto-generated signature registry
SIGNATURES = {
    "MarketDataSignature": MarketDataSignature,
    "MatchingEngineSignature": MatchingEngineSignature,
    "OrderSignature": OrderSignature,
}

def get_signature(name: str) -> dspy.Signature:
    """Get signature by name"""
    if name not in SIGNATURES:
        raise ValueError(f"Unknown signature: {name}. Available: {list(SIGNATURES.keys())}")
    return SIGNATURES[name]

def list_signatures() -> list:
    """List all available signature names"""
    return list(SIGNATURES.keys())
