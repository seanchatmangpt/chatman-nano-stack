{
    "sourceFile": "Makefile",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1753291176822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1753291176822,
            "name": "Commit-0",
            "content": "# CNS Makefile - Integrated with uv package management\n# Built for reliability. Designed to last.\n\n# Python environment (managed by uv)\nPYTHON_ENV = .venv/bin/python\nUV = uv\n\n# C compiler settings\nCC = clang\nCFLAGS = -O3 -Wall -march=native -falign-functions=64\nLDFLAGS = -lm -pthread\n\nSPARQL_SRCS = src/sparql/sparql_parser.c src/sparql/sparql_to_bitactor.c src/sparql/sparql_codegen.c\nCNS_SRCS = src/cns/tick_parallel.c src/cns/cns_pipeline.c\nBENCHMARK_SRCS = src/benchmark/otel_benchmark.c src/benchmark/benchmark_main.c\n\n# Main targets\nall: setup sparql_compiler benchmark test_sparql\n\n# Python environment setup\nsetup: .venv/pyvenv.cfg\n\t@echo \"✓ Python environment ready\"\n\n.venv/pyvenv.cfg:\n\t@echo \"Setting up Python environment with uv...\"\n\t$(UV) venv\n\t$(UV) sync\n\n# Install development dependencies\ndev-setup: setup\n\t$(UV) sync --extra dev --extra benchmark --extra realtime\n\n# Python tools (run in uv environment)\nowl-compile: setup\n\t$(UV) run python owl_compiler.py $(ARGS)\n\nttl2dspy: setup\n\t$(UV) run python ttl2dspy.py $(ARGS)\n\npython-benchmark: setup\n\t$(UV) run python run_benchmark.py\n\npython-test: setup\n\t$(UV) run pytest $(ARGS)\n\nlint: setup\n\t$(UV) run ruff check .\n\t$(UV) run black --check .\n\t$(UV) run mypy .\n\nformat: setup\n\t$(UV) run ruff check --fix .\n\t$(UV) run black .\n\n# C compilation targets (unchanged)\n\nsparql_compiler: src/sparql/sparql_compiler.c $(SPARQL_SRCS)\n\t$(CC) $(CFLAGS) -o $@ $^ $(LDFLAGS)\n\nsrc/sparql/sparql_chains.c: sparql_compiler queries/*.rq\n\t./sparql_compiler queries/*.rq\n\nbenchmark: $(BENCHMARK_SRCS) $(CNS_SRCS) src/sparql/sparql_to_bitactor.c src/sparql/sparql_chains.c\n\t$(CC) $(CFLAGS) -o $@ $^ $(LDFLAGS)\n\ntest_sparql: queries/market_access.rq queries/compliance_check.rq\n\nqueries/market_access.rq:\n\t@mkdir -p queries\n\t@echo \"PREFIX cap: <http://chatman.ai/capability#>\" > $@\n\t@echo \"PREFIX ba: <http://chatman.ai/bitactor#>\" >> $@\n\t@echo \"\" >> $@\n\t@echo \"SELECT ?actor ?market\" >> $@\n\t@echo \"WHERE {\" >> $@\n\t@echo \"    ?actor cap:hasCapability ?cap .\" >> $@\n\t@echo \"    ?cap cap:type cap:MarketDataAccess .\" >> $@\n\t@echo \"    ?cap cap:market ?market .\" >> $@\n\t@echo \"    ?cap cap:validUntil ?expiry .\" >> $@\n\t@echo \"    FILTER(?expiry > NOW())\" >> $@\n\t@echo \"}\" >> $@\n\nqueries/compliance_check.rq:\n\t@mkdir -p queries\n\t@echo \"PREFIX cap: <http://chatman.ai/capability#>\" > $@\n\t@echo \"PREFIX risk: <http://chatman.ai/risk#>\" >> $@\n\t@echo \"\" >> $@\n\t@echo \"SELECT ?order\" >> $@\n\t@echo \"WHERE {\" >> $@\n\t@echo \"    ?order cap:type cap:Order .\" >> $@\n\t@echo \"    ?order cap:value ?value .\" >> $@\n\t@echo \"    ?order risk:exposure ?exposure .\" >> $@\n\t@echo \"    FILTER(?exposure < 1000000)\" >> $@\n\t@echo \"}\" >> $@\n\nrun_benchmark: benchmark\n\t./benchmark\n\n# Combined targets\nfull-test: python-test run_benchmark\n\t@echo \"✓ All tests passed\"\n\nfull-benchmark: python-benchmark run_benchmark\n\t@echo \"✓ All benchmarks completed\"\n\n# Cleaning\nclean: clean-c clean-python\n\trm -rf queries/\n\nclean-c:\n\trm -f sparql_compiler benchmark\n\trm -f src/sparql/sparql_chains.c\n\nclean-python:\n\trm -rf .venv\n\trm -rf .pytest_cache\n\trm -rf __pycache__\n\tfind . -name \"*.pyc\" -delete\n\tfind . -name \"*.pyo\" -delete\n\n# Docker support\ndocker-build:\n\tdocker build -t cns:latest .\n\ndocker-run: docker-build\n\tdocker run --rm -it cns:latest\n\n# Help\nhelp:\n\t@echo \"CNS Build System - James I. Chatman & Sean A. Chatman\"\n\t@echo \"\"\n\t@echo \"Python targets (managed by uv):\"\n\t@echo \"  setup           - Initialize Python environment\"\n\t@echo \"  dev-setup       - Setup with development dependencies\"\n\t@echo \"  owl-compile     - Run OWL compiler (ARGS=...)\"\n\t@echo \"  ttl2dspy        - Run TTL to DSPy converter (ARGS=...)\"\n\t@echo \"  python-test     - Run Python tests (ARGS=...)\"\n\t@echo \"  python-benchmark- Run Python benchmarks\"\n\t@echo \"  lint            - Check code quality\"\n\t@echo \"  format          - Format code\"\n\t@echo \"\"\n\t@echo \"C targets:\"\n\t@echo \"  sparql_compiler - Build SPARQL compiler\"\n\t@echo \"  benchmark       - Build C benchmark suite\"\n\t@echo \"  run_benchmark   - Execute C benchmarks\"\n\t@echo \"\"\n\t@echo \"Combined targets:\"\n\t@echo \"  all             - Build everything\"\n\t@echo \"  full-test       - Run all tests (Python + C)\"\n\t@echo \"  full-benchmark  - Run all benchmarks\"\n\t@echo \"  clean           - Clean all build artifacts\"\n\n.PHONY: all setup dev-setup owl-compile ttl2dspy python-test python-benchmark lint format\n.PHONY: full-test full-benchmark clean clean-c clean-python docker-build docker-run help\n.PHONY: sparql_compiler benchmark run_benchmark test_sparql"
        }
    ]
}