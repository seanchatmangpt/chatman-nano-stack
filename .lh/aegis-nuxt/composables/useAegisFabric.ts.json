{
    "sourceFile": "aegis-nuxt/composables/useAegisFabric.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1753420018643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753420057742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,554 @@\n+// Generated from TTL ontology on 2025-07-24T20:14:10.066165\n+import { ref, computed, onMounted, onUnmounted } from \"vue\";\n+import type { Ref } from \"vue\";\n+import type {\n+  Alert,\n+  Antivirus,\n+  ApplicationAsset,\n+  Asset,\n+  Attack,\n+  Botnet,\n+  CSRF,\n+  ComputeAsset,\n+  CorrectiveControl,\n+  DDoSAttack,\n+  DMZ,\n+  DataAsset,\n+  DataExfiltration,\n+  DetectiveControl,\n+  EDR,\n+  Firewall,\n+  IDS,\n+  IOC,\n+  IPS,\n+  InternalNetwork,\n+  LateralMovement,\n+  LoadBalancer,\n+  Malware,\n+  ManInTheMiddleAttack,\n+  NetworkAsset,\n+  NetworkAttack,\n+  NetworkDevice,\n+  NetworkSegment,\n+  PacketSniffing,\n+  PhishingAttack,\n+  PortScan,\n+  PreventiveControl,\n+  PrivilegeEscalation,\n+  PublicNetwork,\n+  Ransomware,\n+  Rootkit,\n+  Router,\n+  SIEM,\n+  SOAR,\n+  SQLInjection,\n+  SecurityControl,\n+  SecurityEvent,\n+  SecurityIncident,\n+  SocialEngineering,\n+  SpearPhishing,\n+  Spyware,\n+  Switch,\n+  Threat,\n+  ThreatIntelligence,\n+  Trojan,\n+  UserAsset,\n+  VPN,\n+  Virus,\n+  Vulnerability,\n+  WebAttack,\n+  Worm,\n+  XSS,\n+  ZeroDayVulnerability,\n+  ThreatStats,\n+  NetworkNode,\n+  NetworkEdge,\n+} from \"~/types/aegis\";\n+\n+export const useAegisFabric = () => {\n+  // WebSocket connection\n+  const ws = ref<WebSocket | null>(null);\n+  const connected = ref(false);\n+\n+  // State for each class\n+  const alerts: Ref<Alert[]> = ref([]);\n+  const antiviruss: Ref<Antivirus[]> = ref([]);\n+  const applicationAssets: Ref<ApplicationAsset[]> = ref([]);\n+  const assets: Ref<Asset[]> = ref([]);\n+  const attacks: Ref<Attack[]> = ref([]);\n+  const botnets: Ref<Botnet[]> = ref([]);\n+  const csrfs: Ref<CSRF[]> = ref([]);\n+  const computeAssets: Ref<ComputeAsset[]> = ref([]);\n+  const correctiveControls: Ref<CorrectiveControl[]> = ref([]);\n+  const ddoSattacks: Ref<DDoSAttack[]> = ref([]);\n+  const dmzs: Ref<DMZ[]> = ref([]);\n+  const dataAssets: Ref<DataAsset[]> = ref([]);\n+  const dataExfiltrations: Ref<DataExfiltration[]> = ref([]);\n+  const detectiveControls: Ref<DetectiveControl[]> = ref([]);\n+  const edrs: Ref<EDR[]> = ref([]);\n+  const firewalls: Ref<Firewall[]> = ref([]);\n+  const idss: Ref<IDS[]> = ref([]);\n+  const iocs: Ref<IOC[]> = ref([]);\n+  const ipss: Ref<IPS[]> = ref([]);\n+  const internalNetworks: Ref<InternalNetwork[]> = ref([]);\n+  const lateralMovements: Ref<LateralMovement[]> = ref([]);\n+  const loadBalancers: Ref<LoadBalancer[]> = ref([]);\n+  const malwares: Ref<Malware[]> = ref([]);\n+  const manInTheMiddleAttacks: Ref<ManInTheMiddleAttack[]> = ref([]);\n+  const networkAssets: Ref<NetworkAsset[]> = ref([]);\n+  const networkAttacks: Ref<NetworkAttack[]> = ref([]);\n+  const networkDevices: Ref<NetworkDevice[]> = ref([]);\n+  const networkSegments: Ref<NetworkSegment[]> = ref([]);\n+  const packetSniffings: Ref<PacketSniffing[]> = ref([]);\n+  const phishingAttacks: Ref<PhishingAttack[]> = ref([]);\n+  const portScans: Ref<PortScan[]> = ref([]);\n+  const preventiveControls: Ref<PreventiveControl[]> = ref([]);\n+  const privilegeEscalations: Ref<PrivilegeEscalation[]> = ref([]);\n+  const publicNetworks: Ref<PublicNetwork[]> = ref([]);\n+  const ransomwares: Ref<Ransomware[]> = ref([]);\n+  const rootkits: Ref<Rootkit[]> = ref([]);\n+  const routers: Ref<Router[]> = ref([]);\n+  const siems: Ref<SIEM[]> = ref([]);\n+  const soars: Ref<SOAR[]> = ref([]);\n+  const sqlinjections: Ref<SQLInjection[]> = ref([]);\n+  const securityControls: Ref<SecurityControl[]> = ref([]);\n+  const securityEvents: Ref<SecurityEvent[]> = ref([]);\n+  const securityIncidents: Ref<SecurityIncident[]> = ref([]);\n+  const socialEngineerings: Ref<SocialEngineering[]> = ref([]);\n+  const spearPhishings: Ref<SpearPhishing[]> = ref([]);\n+  const spywares: Ref<Spyware[]> = ref([]);\n+  const switchs: Ref<Switch[]> = ref([]);\n+  const threats: Ref<Threat[]> = ref([]);\n+  const threatIntelligences: Ref<ThreatIntelligence[]> = ref([]);\n+  const trojans: Ref<Trojan[]> = ref([]);\n+  const userAssets: Ref<UserAsset[]> = ref([]);\n+  const vpns: Ref<VPN[]> = ref([]);\n+  const viruss: Ref<Virus[]> = ref([]);\n+  const vulnerabilitys: Ref<Vulnerability[]> = ref([]);\n+  const webAttacks: Ref<WebAttack[]> = ref([]);\n+  const worms: Ref<Worm[]> = ref([]);\n+  const xsss: Ref<XSS[]> = ref([]);\n+  const zeroDayVulnerabilitys: Ref<ZeroDayVulnerability[]> = ref([]);\n+\n+  // Computed properties\n+  const activethreats = computed(() => {\n+    const allThreats = [];\n+    allThreats.push(...attacks.value);\n+    allThreats.push(...ddoSattacks.value);\n+    allThreats.push(...manInTheMiddleAttacks.value);\n+    allThreats.push(...networkAttacks.value);\n+    allThreats.push(...phishingAttacks.value);\n+    allThreats.push(...threats.value);\n+    allThreats.push(...threatIntelligences.value);\n+    allThreats.push(...webAttacks.value);\n+    return allThreats;\n+  });\n+\n+  const allAssets = computed(() => {\n+    const allAssetList = [];\n+    allAssetList.push(...applicationAssets.value);\n+    allAssetList.push(...assets.value);\n+    allAssetList.push(...computeAssets.value);\n+    allAssetList.push(...dataAssets.value);\n+    allAssetList.push(...networkAssets.value);\n+    allAssetList.push(...userAssets.value);\n+    return allAssetList;\n+  });\n+\n+  const threatStats = computed<ThreatStats>(() => ({\n+    total: activethreats.value.length,\n+    critical: activethreats.value.filter((t) => t.severity === \"critical\")\n+      .length,\n+    high: activethreats.value.filter((t) => t.severity === \"high\").length,\n+    medium: activethreats.value.filter((t) => t.severity === \"medium\").length,\n+    low: activethreats.value.filter((t) => t.severity === \"low\").length,\n+    neutralized: 0,\n+  }));\n+\n+  // WebSocket connection\n+  const connect = () => {\n+    ws.value = new WebSocket(`ws://${window.location.host}/api/aegis/ws`);\n+\n+    ws.value.onopen = () => {\n+      connected.value = true;\n+      console.log(\"Connected to Aegis Fabric\");\n+    };\n+\n+    ws.value.onmessage = (event) => {\n+      const data = JSON.parse(event.data);\n+      handleMessage(data);\n+    };\n+\n+    ws.value.onclose = () => {\n+      connected.value = false;\n+      console.log(\"Disconnected from Aegis Fabric\");\n+      // Reconnect after 1 second\n+      setTimeout(connect, 1000);\n+    };\n+  };\n+\n+  const handleMessage = (data: any) => {\n+    switch (data.type) {\n+      case \"AlertUpdate\":\n+        alerts.value = data.payload;\n+        break;\n+      case \"AntivirusUpdate\":\n+        antiviruss.value = data.payload;\n+        break;\n+      case \"ApplicationAssetUpdate\":\n+        applicationAssets.value = data.payload;\n+        break;\n+      case \"AssetUpdate\":\n+        assets.value = data.payload;\n+        break;\n+      case \"AttackUpdate\":\n+        attacks.value = data.payload;\n+        break;\n+      case \"BotnetUpdate\":\n+        botnets.value = data.payload;\n+        break;\n+      case \"CSRFUpdate\":\n+        csrfs.value = data.payload;\n+        break;\n+      case \"ComputeAssetUpdate\":\n+        computeAssets.value = data.payload;\n+        break;\n+      case \"CorrectiveControlUpdate\":\n+        correctiveControls.value = data.payload;\n+        break;\n+      case \"DDoSAttackUpdate\":\n+        ddoSattacks.value = data.payload;\n+        break;\n+      case \"DMZUpdate\":\n+        dmzs.value = data.payload;\n+        break;\n+      case \"DataAssetUpdate\":\n+        dataAssets.value = data.payload;\n+        break;\n+      case \"DataExfiltrationUpdate\":\n+        dataExfiltrations.value = data.payload;\n+        break;\n+      case \"DetectiveControlUpdate\":\n+        detectiveControls.value = data.payload;\n+        break;\n+      case \"EDRUpdate\":\n+        edrs.value = data.payload;\n+        break;\n+      case \"FirewallUpdate\":\n+        firewalls.value = data.payload;\n+        break;\n+      case \"IDSUpdate\":\n+        idss.value = data.payload;\n+        break;\n+      case \"IOCUpdate\":\n+        iocs.value = data.payload;\n+        break;\n+      case \"IPSUpdate\":\n+        ipss.value = data.payload;\n+        break;\n+      case \"InternalNetworkUpdate\":\n+        internalNetworks.value = data.payload;\n+        break;\n+      case \"LateralMovementUpdate\":\n+        lateralMovements.value = data.payload;\n+        break;\n+      case \"LoadBalancerUpdate\":\n+        loadBalancers.value = data.payload;\n+        break;\n+      case \"MalwareUpdate\":\n+        malwares.value = data.payload;\n+        break;\n+      case \"ManInTheMiddleAttackUpdate\":\n+        manInTheMiddleAttacks.value = data.payload;\n+        break;\n+      case \"NetworkAssetUpdate\":\n+        networkAssets.value = data.payload;\n+        break;\n+      case \"NetworkAttackUpdate\":\n+        networkAttacks.value = data.payload;\n+        break;\n+      case \"NetworkDeviceUpdate\":\n+        networkDevices.value = data.payload;\n+        break;\n+      case \"NetworkSegmentUpdate\":\n+        networkSegments.value = data.payload;\n+        break;\n+      case \"PacketSniffingUpdate\":\n+        packetSniffings.value = data.payload;\n+        break;\n+      case \"PhishingAttackUpdate\":\n+        phishingAttacks.value = data.payload;\n+        break;\n+      case \"PortScanUpdate\":\n+        portScans.value = data.payload;\n+        break;\n+      case \"PreventiveControlUpdate\":\n+        preventiveControls.value = data.payload;\n+        break;\n+      case \"PrivilegeEscalationUpdate\":\n+        privilegeEscalations.value = data.payload;\n+        break;\n+      case \"PublicNetworkUpdate\":\n+        publicNetworks.value = data.payload;\n+        break;\n+      case \"RansomwareUpdate\":\n+        ransomwares.value = data.payload;\n+        break;\n+      case \"RootkitUpdate\":\n+        rootkits.value = data.payload;\n+        break;\n+      case \"RouterUpdate\":\n+        routers.value = data.payload;\n+        break;\n+      case \"SIEMUpdate\":\n+        siems.value = data.payload;\n+        break;\n+      case \"SOARUpdate\":\n+        soars.value = data.payload;\n+        break;\n+      case \"SQLInjectionUpdate\":\n+        sqlinjections.value = data.payload;\n+        break;\n+      case \"SecurityControlUpdate\":\n+        securityControls.value = data.payload;\n+        break;\n+      case \"SecurityEventUpdate\":\n+        securityEvents.value = data.payload;\n+        break;\n+      case \"SecurityIncidentUpdate\":\n+        securityIncidents.value = data.payload;\n+        break;\n+      case \"SocialEngineeringUpdate\":\n+        socialEngineerings.value = data.payload;\n+        break;\n+      case \"SpearPhishingUpdate\":\n+        spearPhishings.value = data.payload;\n+        break;\n+      case \"SpywareUpdate\":\n+        spywares.value = data.payload;\n+        break;\n+      case \"SwitchUpdate\":\n+        switchs.value = data.payload;\n+        break;\n+      case \"ThreatUpdate\":\n+        threats.value = data.payload;\n+        break;\n+      case \"ThreatIntelligenceUpdate\":\n+        threatIntelligences.value = data.payload;\n+        break;\n+      case \"TrojanUpdate\":\n+        trojans.value = data.payload;\n+        break;\n+      case \"UserAssetUpdate\":\n+        userAssets.value = data.payload;\n+        break;\n+      case \"VPNUpdate\":\n+        vpns.value = data.payload;\n+        break;\n+      case \"VirusUpdate\":\n+        viruss.value = data.payload;\n+        break;\n+      case \"VulnerabilityUpdate\":\n+        vulnerabilitys.value = data.payload;\n+        break;\n+      case \"WebAttackUpdate\":\n+        webAttacks.value = data.payload;\n+        break;\n+      case \"WormUpdate\":\n+        worms.value = data.payload;\n+        break;\n+      case \"XSSUpdate\":\n+        xsss.value = data.payload;\n+        break;\n+      case \"ZeroDayVulnerabilityUpdate\":\n+        zeroDayVulnerabilitys.value = data.payload;\n+        break;\n+      default:\n+        console.warn(\"Unknown message type:\", data.type);\n+    }\n+  };\n+\n+  // Actions\n+  const neutralizeThreat = async (threatId: string) => {\n+    if (ws.value?.readyState === WebSocket.OPEN) {\n+      ws.value.send(\n+        JSON.stringify({\n+          type: \"neutralizeThreat\",\n+          threatId,\n+        })\n+      );\n+    }\n+  };\n+\n+  // Health checks\n+  const getApplicationAssetHealth = () => {\n+    const assets = applicationAssets.value;\n+    if (assets.length === 0) return \"unknown\";\n+    const healthyCount = assets.filter((a) => a.status === \"healthy\").length;\n+    const ratio = healthyCount / assets.length;\n+    if (ratio >= 0.9) return \"healthy\";\n+    if (ratio >= 0.7) return \"warning\";\n+    return \"critical\";\n+  };\n+  const getAssetHealth = () => {\n+    const assets = assets.value;\n+    if (assets.length === 0) return \"unknown\";\n+    const healthyCount = assets.filter((a) => a.status === \"healthy\").length;\n+    const ratio = healthyCount / assets.length;\n+    if (ratio >= 0.9) return \"healthy\";\n+    if (ratio >= 0.7) return \"warning\";\n+    return \"critical\";\n+  };\n+  const getComputeAssetHealth = () => {\n+    const assets = computeAssets.value;\n+    if (assets.length === 0) return \"unknown\";\n+    const healthyCount = assets.filter((a) => a.status === \"healthy\").length;\n+    const ratio = healthyCount / assets.length;\n+    if (ratio >= 0.9) return \"healthy\";\n+    if (ratio >= 0.7) return \"warning\";\n+    return \"critical\";\n+  };\n+  const getDataAssetHealth = () => {\n+    const assets = dataAssets.value;\n+    if (assets.length === 0) return \"unknown\";\n+    const healthyCount = assets.filter((a) => a.status === \"healthy\").length;\n+    const ratio = healthyCount / assets.length;\n+    if (ratio >= 0.9) return \"healthy\";\n+    if (ratio >= 0.7) return \"warning\";\n+    return \"critical\";\n+  };\n+  const getNetworkAssetHealth = () => {\n+    const assets = networkAssets.value;\n+    if (assets.length === 0) return \"unknown\";\n+    const healthyCount = assets.filter((a) => a.status === \"healthy\").length;\n+    const ratio = healthyCount / assets.length;\n+    if (ratio >= 0.9) return \"healthy\";\n+    if (ratio >= 0.7) return \"warning\";\n+    return \"critical\";\n+  };\n+  const getUserAssetHealth = () => {\n+    const assets = userAssets.value;\n+    if (assets.length === 0) return \"unknown\";\n+    const healthyCount = assets.filter((a) => a.status === \"healthy\").length;\n+    const ratio = healthyCount / assets.length;\n+    if (ratio >= 0.9) return \"healthy\";\n+    if (ratio >= 0.7) return \"warning\";\n+    return \"critical\";\n+  };\n+\n+  const getSegmentHealth = (segment: any) => {\n+    // Implement segment health logic\n+    return \"healthy\";\n+  };\n+\n+  // Network topology\n+  const networkNodes = computed<NetworkNode[]>(() => {\n+    // Build network nodes from assets\n+    return [];\n+  });\n+\n+  const networkEdges = computed<NetworkEdge[]>(() => {\n+    // Build network edges from relationships\n+    return [];\n+  });\n+\n+  const activeNetworkThreats = computed(() => {\n+    return activethreats.value.filter((t) => t.targetType === \"network\");\n+  });\n+\n+  // Lifecycle\n+  onMounted(() => {\n+    connect();\n+  });\n+\n+  onUnmounted(() => {\n+    if (ws.value) {\n+      ws.value.close();\n+    }\n+  });\n+\n+  return {\n+    // State\n+    alerts,\n+    antiviruss,\n+    applicationAssets,\n+    assets,\n+    attacks,\n+    botnets,\n+    csrfs,\n+    computeAssets,\n+    correctiveControls,\n+    ddoSattacks,\n+    dmzs,\n+    dataAssets,\n+    dataExfiltrations,\n+    detectiveControls,\n+    edrs,\n+    firewalls,\n+    idss,\n+    iocs,\n+    ipss,\n+    internalNetworks,\n+    lateralMovements,\n+    loadBalancers,\n+    malwares,\n+    manInTheMiddleAttacks,\n+    networkAssets,\n+    networkAttacks,\n+    networkDevices,\n+    networkSegments,\n+    packetSniffings,\n+    phishingAttacks,\n+    portScans,\n+    preventiveControls,\n+    privilegeEscalations,\n+    publicNetworks,\n+    ransomwares,\n+    rootkits,\n+    routers,\n+    siems,\n+    soars,\n+    sqlinjections,\n+    securityControls,\n+    securityEvents,\n+    securityIncidents,\n+    socialEngineerings,\n+    spearPhishings,\n+    spywares,\n+    switchs,\n+    threats,\n+    threatIntelligences,\n+    trojans,\n+    userAssets,\n+    vpns,\n+    viruss,\n+    vulnerabilitys,\n+    webAttacks,\n+    worms,\n+    xsss,\n+    zeroDayVulnerabilitys,\n+\n+    // Computed\n+    activethreats,\n+    allAssets,\n+    threatStats,\n+    networkNodes,\n+    networkEdges,\n+    activeNetworkThreats,\n+\n+    // Actions\n+    neutralizeThreat,\n+\n+    // Health\n+    getApplicationAssetHealth,\n+    getAssetHealth,\n+    getComputeAssetHealth,\n+    getDataAssetHealth,\n+    getNetworkAssetHealth,\n+    getUserAssetHealth,\n+    getSegmentHealth,\n+\n+    // Connection\n+    connected,\n+  };\n+};\n"
                },
                {
                    "date": 1753420064617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -390,12 +390,12 @@\n     if (ratio >= 0.7) return \"warning\";\n     return \"critical\";\n   };\n   const getAssetHealth = () => {\n-    const assets = assets.value;\n-    if (assets.length === 0) return \"unknown\";\n-    const healthyCount = assets.filter((a) => a.status === \"healthy\").length;\n-    const ratio = healthyCount / assets.length;\n+    const assetList = assets.value;\n+    if (assetList.length === 0) return \"unknown\";\n+    const healthyCount = assetList.filter((a: any) => a.status === \"healthy\").length;\n+    const ratio = healthyCount / assetList.length;\n     if (ratio >= 0.9) return \"healthy\";\n     if (ratio >= 0.7) return \"warning\";\n     return \"critical\";\n   };\n@@ -551,555 +551,4 @@\n     // Connection\n     connected,\n   };\n };\n-// Generated from TTL ontology on 2025-07-24T20:14:10.066165\n-import { ref, computed, onMounted, onUnmounted } from 'vue'\n-import type { Ref } from 'vue'\n-import type { \n-Alert,\n-Antivirus,\n-ApplicationAsset,\n-Asset,\n-Attack,\n-Botnet,\n-CSRF,\n-ComputeAsset,\n-CorrectiveControl,\n-DDoSAttack,\n-DMZ,\n-DataAsset,\n-DataExfiltration,\n-DetectiveControl,\n-EDR,\n-Firewall,\n-IDS,\n-IOC,\n-IPS,\n-InternalNetwork,\n-LateralMovement,\n-LoadBalancer,\n-Malware,\n-ManInTheMiddleAttack,\n-NetworkAsset,\n-NetworkAttack,\n-NetworkDevice,\n-NetworkSegment,\n-PacketSniffing,\n-PhishingAttack,\n-PortScan,\n-PreventiveControl,\n-PrivilegeEscalation,\n-PublicNetwork,\n-Ransomware,\n-Rootkit,\n-Router,\n-SIEM,\n-SOAR,\n-SQLInjection,\n-SecurityControl,\n-SecurityEvent,\n-SecurityIncident,\n-SocialEngineering,\n-SpearPhishing,\n-Spyware,\n-Switch,\n-Threat,\n-ThreatIntelligence,\n-Trojan,\n-UserAsset,\n-VPN,\n-Virus,\n-Vulnerability,\n-WebAttack,\n-Worm,\n-XSS,\n-ZeroDayVulnerability,\n-ThreatStats,\n-  NetworkNode,\n-  NetworkEdge\n-} from '~/types/aegis'\n-\n-export const useAegisFabric = () => {\n-  // WebSocket connection\n-  const ws = ref<WebSocket | null>(null)\n-  const connected = ref(false)\n-  \n-  // State for each class\n-  const alerts: Ref<Alert[]> = ref([])\n-  const antiviruss: Ref<Antivirus[]> = ref([])\n-  const applicationAssets: Ref<ApplicationAsset[]> = ref([])\n-  const assets: Ref<Asset[]> = ref([])\n-  const attacks: Ref<Attack[]> = ref([])\n-  const botnets: Ref<Botnet[]> = ref([])\n-  const csrfs: Ref<CSRF[]> = ref([])\n-  const computeAssets: Ref<ComputeAsset[]> = ref([])\n-  const correctiveControls: Ref<CorrectiveControl[]> = ref([])\n-  const ddoSattacks: Ref<DDoSAttack[]> = ref([])\n-  const dmzs: Ref<DMZ[]> = ref([])\n-  const dataAssets: Ref<DataAsset[]> = ref([])\n-  const dataExfiltrations: Ref<DataExfiltration[]> = ref([])\n-  const detectiveControls: Ref<DetectiveControl[]> = ref([])\n-  const edrs: Ref<EDR[]> = ref([])\n-  const firewalls: Ref<Firewall[]> = ref([])\n-  const idss: Ref<IDS[]> = ref([])\n-  const iocs: Ref<IOC[]> = ref([])\n-  const ipss: Ref<IPS[]> = ref([])\n-  const internalNetworks: Ref<InternalNetwork[]> = ref([])\n-  const lateralMovements: Ref<LateralMovement[]> = ref([])\n-  const loadBalancers: Ref<LoadBalancer[]> = ref([])\n-  const malwares: Ref<Malware[]> = ref([])\n-  const manInTheMiddleAttacks: Ref<ManInTheMiddleAttack[]> = ref([])\n-  const networkAssets: Ref<NetworkAsset[]> = ref([])\n-  const networkAttacks: Ref<NetworkAttack[]> = ref([])\n-  const networkDevices: Ref<NetworkDevice[]> = ref([])\n-  const networkSegments: Ref<NetworkSegment[]> = ref([])\n-  const packetSniffings: Ref<PacketSniffing[]> = ref([])\n-  const phishingAttacks: Ref<PhishingAttack[]> = ref([])\n-  const portScans: Ref<PortScan[]> = ref([])\n-  const preventiveControls: Ref<PreventiveControl[]> = ref([])\n-  const privilegeEscalations: Ref<PrivilegeEscalation[]> = ref([])\n-  const publicNetworks: Ref<PublicNetwork[]> = ref([])\n-  const ransomwares: Ref<Ransomware[]> = ref([])\n-  const rootkits: Ref<Rootkit[]> = ref([])\n-  const routers: Ref<Router[]> = ref([])\n-  const siems: Ref<SIEM[]> = ref([])\n-  const soars: Ref<SOAR[]> = ref([])\n-  const sqlinjections: Ref<SQLInjection[]> = ref([])\n-  const securityControls: Ref<SecurityControl[]> = ref([])\n-  const securityEvents: Ref<SecurityEvent[]> = ref([])\n-  const securityIncidents: Ref<SecurityIncident[]> = ref([])\n-  const socialEngineerings: Ref<SocialEngineering[]> = ref([])\n-  const spearPhishings: Ref<SpearPhishing[]> = ref([])\n-  const spywares: Ref<Spyware[]> = ref([])\n-  const switchs: Ref<Switch[]> = ref([])\n-  const threats: Ref<Threat[]> = ref([])\n-  const threatIntelligences: Ref<ThreatIntelligence[]> = ref([])\n-  const trojans: Ref<Trojan[]> = ref([])\n-  const userAssets: Ref<UserAsset[]> = ref([])\n-  const vpns: Ref<VPN[]> = ref([])\n-  const viruss: Ref<Virus[]> = ref([])\n-  const vulnerabilitys: Ref<Vulnerability[]> = ref([])\n-  const webAttacks: Ref<WebAttack[]> = ref([])\n-  const worms: Ref<Worm[]> = ref([])\n-  const xsss: Ref<XSS[]> = ref([])\n-  const zeroDayVulnerabilitys: Ref<ZeroDayVulnerability[]> = ref([])\n-  \n-  // Computed properties\n-  const activethreats = computed(() => {\n-    const allThreats = []\n-    allThreats.push(...attacks.value)\n-    allThreats.push(...ddoSattacks.value)\n-    allThreats.push(...manInTheMiddleAttacks.value)\n-    allThreats.push(...networkAttacks.value)\n-    allThreats.push(...phishingAttacks.value)\n-    allThreats.push(...threats.value)\n-    allThreats.push(...threatIntelligences.value)\n-    allThreats.push(...webAttacks.value)\n-    return allThreats\n-  })\n-  \n-  const allAssets = computed(() => {\n-    const assets = []\n-    assets.push(...applicationAssets.value)\n-    assets.push(...assets.value)\n-    assets.push(...computeAssets.value)\n-    assets.push(...dataAssets.value)\n-    assets.push(...networkAssets.value)\n-    assets.push(...userAssets.value)\n-    return assets\n-  })\n-  \n-  const threatStats = computed<ThreatStats>(() => ({\n-    total: activethreats.value.length,\n-    critical: activethreats.value.filter(t => t.severity === 'critical').length,\n-    high: activethreats.value.filter(t => t.severity === 'high').length,\n-    medium: activethreats.value.filter(t => t.severity === 'medium').length,\n-    low: activethreats.value.filter(t => t.severity === 'low').length,\n-    neutralized: 0\n-  }))\n-  \n-  // WebSocket connection\n-  const connect = () => {\n-    ws.value = new WebSocket(`ws://${window.location.host}/api/aegis/ws`)\n-    \n-    ws.value.onopen = () => {\n-      connected.value = true\n-      console.log('Connected to Aegis Fabric')\n-    }\n-    \n-    ws.value.onmessage = (event) => {\n-      const data = JSON.parse(event.data)\n-      handleMessage(data)\n-    }\n-    \n-    ws.value.onclose = () => {\n-      connected.value = false\n-      console.log('Disconnected from Aegis Fabric')\n-      // Reconnect after 1 second\n-      setTimeout(connect, 1000)\n-    }\n-  }\n-  \n-  const handleMessage = (data: any) => {\n-    switch (data.type) {\n-      case 'AlertUpdate':\n-        alerts.value = data.payload\n-        break\n-      case 'AntivirusUpdate':\n-        antiviruss.value = data.payload\n-        break\n-      case 'ApplicationAssetUpdate':\n-        applicationAssets.value = data.payload\n-        break\n-      case 'AssetUpdate':\n-        assets.value = data.payload\n-        break\n-      case 'AttackUpdate':\n-        attacks.value = data.payload\n-        break\n-      case 'BotnetUpdate':\n-        botnets.value = data.payload\n-        break\n-      case 'CSRFUpdate':\n-        csrfs.value = data.payload\n-        break\n-      case 'ComputeAssetUpdate':\n-        computeAssets.value = data.payload\n-        break\n-      case 'CorrectiveControlUpdate':\n-        correctiveControls.value = data.payload\n-        break\n-      case 'DDoSAttackUpdate':\n-        ddoSattacks.value = data.payload\n-        break\n-      case 'DMZUpdate':\n-        dmzs.value = data.payload\n-        break\n-      case 'DataAssetUpdate':\n-        dataAssets.value = data.payload\n-        break\n-      case 'DataExfiltrationUpdate':\n-        dataExfiltrations.value = data.payload\n-        break\n-      case 'DetectiveControlUpdate':\n-        detectiveControls.value = data.payload\n-        break\n-      case 'EDRUpdate':\n-        edrs.value = data.payload\n-        break\n-      case 'FirewallUpdate':\n-        firewalls.value = data.payload\n-        break\n-      case 'IDSUpdate':\n-        idss.value = data.payload\n-        break\n-      case 'IOCUpdate':\n-        iocs.value = data.payload\n-        break\n-      case 'IPSUpdate':\n-        ipss.value = data.payload\n-        break\n-      case 'InternalNetworkUpdate':\n-        internalNetworks.value = data.payload\n-        break\n-      case 'LateralMovementUpdate':\n-        lateralMovements.value = data.payload\n-        break\n-      case 'LoadBalancerUpdate':\n-        loadBalancers.value = data.payload\n-        break\n-      case 'MalwareUpdate':\n-        malwares.value = data.payload\n-        break\n-      case 'ManInTheMiddleAttackUpdate':\n-        manInTheMiddleAttacks.value = data.payload\n-        break\n-      case 'NetworkAssetUpdate':\n-        networkAssets.value = data.payload\n-        break\n-      case 'NetworkAttackUpdate':\n-        networkAttacks.value = data.payload\n-        break\n-      case 'NetworkDeviceUpdate':\n-        networkDevices.value = data.payload\n-        break\n-      case 'NetworkSegmentUpdate':\n-        networkSegments.value = data.payload\n-        break\n-      case 'PacketSniffingUpdate':\n-        packetSniffings.value = data.payload\n-        break\n-      case 'PhishingAttackUpdate':\n-        phishingAttacks.value = data.payload\n-        break\n-      case 'PortScanUpdate':\n-        portScans.value = data.payload\n-        break\n-      case 'PreventiveControlUpdate':\n-        preventiveControls.value = data.payload\n-        break\n-      case 'PrivilegeEscalationUpdate':\n-        privilegeEscalations.value = data.payload\n-        break\n-      case 'PublicNetworkUpdate':\n-        publicNetworks.value = data.payload\n-        break\n-      case 'RansomwareUpdate':\n-        ransomwares.value = data.payload\n-        break\n-      case 'RootkitUpdate':\n-        rootkits.value = data.payload\n-        break\n-      case 'RouterUpdate':\n-        routers.value = data.payload\n-        break\n-      case 'SIEMUpdate':\n-        siems.value = data.payload\n-        break\n-      case 'SOARUpdate':\n-        soars.value = data.payload\n-        break\n-      case 'SQLInjectionUpdate':\n-        sqlinjections.value = data.payload\n-        break\n-      case 'SecurityControlUpdate':\n-        securityControls.value = data.payload\n-        break\n-      case 'SecurityEventUpdate':\n-        securityEvents.value = data.payload\n-        break\n-      case 'SecurityIncidentUpdate':\n-        securityIncidents.value = data.payload\n-        break\n-      case 'SocialEngineeringUpdate':\n-        socialEngineerings.value = data.payload\n-        break\n-      case 'SpearPhishingUpdate':\n-        spearPhishings.value = data.payload\n-        break\n-      case 'SpywareUpdate':\n-        spywares.value = data.payload\n-        break\n-      case 'SwitchUpdate':\n-        switchs.value = data.payload\n-        break\n-      case 'ThreatUpdate':\n-        threats.value = data.payload\n-        break\n-      case 'ThreatIntelligenceUpdate':\n-        threatIntelligences.value = data.payload\n-        break\n-      case 'TrojanUpdate':\n-        trojans.value = data.payload\n-        break\n-      case 'UserAssetUpdate':\n-        userAssets.value = data.payload\n-        break\n-      case 'VPNUpdate':\n-        vpns.value = data.payload\n-        break\n-      case 'VirusUpdate':\n-        viruss.value = data.payload\n-        break\n-      case 'VulnerabilityUpdate':\n-        vulnerabilitys.value = data.payload\n-        break\n-      case 'WebAttackUpdate':\n-        webAttacks.value = data.payload\n-        break\n-      case 'WormUpdate':\n-        worms.value = data.payload\n-        break\n-      case 'XSSUpdate':\n-        xsss.value = data.payload\n-        break\n-      case 'ZeroDayVulnerabilityUpdate':\n-        zeroDayVulnerabilitys.value = data.payload\n-        break\n-      default:\n-        console.warn('Unknown message type:', data.type)\n-    }\n-  }\n-  \n-  // Actions\n-  const neutralizeThreat = async (threatId: string) => {\n-    if (ws.value?.readyState === WebSocket.OPEN) {\n-      ws.value.send(JSON.stringify({\n-        type: 'neutralizeThreat',\n-        threatId\n-      }))\n-    }\n-  }\n-  \n-  // Health checks\n-  const getApplicationAssetHealth = () => {\n-    const assets = applicationAssets.value\n-    if (assets.length === 0) return 'unknown'\n-    const healthyCount = assets.filter(a => a.status === 'healthy').length\n-    const ratio = healthyCount / assets.length\n-    if (ratio >= 0.9) return 'healthy'\n-    if (ratio >= 0.7) return 'warning'\n-    return 'critical'\n-  }\n-  const getAssetHealth = () => {\n-    const assets = assets.value\n-    if (assets.length === 0) return 'unknown'\n-    const healthyCount = assets.filter(a => a.status === 'healthy').length\n-    const ratio = healthyCount / assets.length\n-    if (ratio >= 0.9) return 'healthy'\n-    if (ratio >= 0.7) return 'warning'\n-    return 'critical'\n-  }\n-  const getComputeAssetHealth = () => {\n-    const assets = computeAssets.value\n-    if (assets.length === 0) return 'unknown'\n-    const healthyCount = assets.filter(a => a.status === 'healthy').length\n-    const ratio = healthyCount / assets.length\n-    if (ratio >= 0.9) return 'healthy'\n-    if (ratio >= 0.7) return 'warning'\n-    return 'critical'\n-  }\n-  const getDataAssetHealth = () => {\n-    const assets = dataAssets.value\n-    if (assets.length === 0) return 'unknown'\n-    const healthyCount = assets.filter(a => a.status === 'healthy').length\n-    const ratio = healthyCount / assets.length\n-    if (ratio >= 0.9) return 'healthy'\n-    if (ratio >= 0.7) return 'warning'\n-    return 'critical'\n-  }\n-  const getNetworkAssetHealth = () => {\n-    const assets = networkAssets.value\n-    if (assets.length === 0) return 'unknown'\n-    const healthyCount = assets.filter(a => a.status === 'healthy').length\n-    const ratio = healthyCount / assets.length\n-    if (ratio >= 0.9) return 'healthy'\n-    if (ratio >= 0.7) return 'warning'\n-    return 'critical'\n-  }\n-  const getUserAssetHealth = () => {\n-    const assets = userAssets.value\n-    if (assets.length === 0) return 'unknown'\n-    const healthyCount = assets.filter(a => a.status === 'healthy').length\n-    const ratio = healthyCount / assets.length\n-    if (ratio >= 0.9) return 'healthy'\n-    if (ratio >= 0.7) return 'warning'\n-    return 'critical'\n-  }\n-  \n-  const getSegmentHealth = (segment: any) => {\n-    // Implement segment health logic\n-    return 'healthy'\n-  }\n-  \n-  // Network topology\n-  const networkNodes = computed<NetworkNode[]>(() => {\n-    // Build network nodes from assets\n-    return []\n-  })\n-  \n-  const networkEdges = computed<NetworkEdge[]>(() => {\n-    // Build network edges from relationships\n-    return []\n-  })\n-  \n-  const activeNetworkThreats = computed(() => {\n-    return activethreats.value.filter(t => t.targetType === 'network')\n-  })\n-  \n-  // Lifecycle\n-  onMounted(() => {\n-    connect()\n-  })\n-  \n-  onUnmounted(() => {\n-    if (ws.value) {\n-      ws.value.close()\n-    }\n-  })\n-  \n-  return {\n-    // State\n-alerts,\n-antiviruss,\n-applicationAssets,\n-assets,\n-attacks,\n-botnets,\n-csrfs,\n-computeAssets,\n-correctiveControls,\n-ddoSattacks,\n-dmzs,\n-dataAssets,\n-dataExfiltrations,\n-detectiveControls,\n-edrs,\n-firewalls,\n-idss,\n-iocs,\n-ipss,\n-internalNetworks,\n-lateralMovements,\n-loadBalancers,\n-malwares,\n-manInTheMiddleAttacks,\n-networkAssets,\n-networkAttacks,\n-networkDevices,\n-networkSegments,\n-packetSniffings,\n-phishingAttacks,\n-portScans,\n-preventiveControls,\n-privilegeEscalations,\n-publicNetworks,\n-ransomwares,\n-rootkits,\n-routers,\n-siems,\n-soars,\n-sqlinjections,\n-securityControls,\n-securityEvents,\n-securityIncidents,\n-socialEngineerings,\n-spearPhishings,\n-spywares,\n-switchs,\n-threats,\n-threatIntelligences,\n-trojans,\n-userAssets,\n-vpns,\n-viruss,\n-vulnerabilitys,\n-webAttacks,\n-worms,\n-xsss,\n-zeroDayVulnerabilitys,\n-    \n-    // Computed\n-    activethreats,\n-    allAssets,\n-    threatStats,\n-    networkNodes,\n-    networkEdges,\n-    activeNetworkThreats,\n-    \n-    // Actions\n-    neutralizeThreat,\n-    \n-    // Health\n-getApplicationAssetHealth,\n-getAssetHealth,\n-getComputeAssetHealth,\n-getDataAssetHealth,\n-getNetworkAssetHealth,\n-getUserAssetHealth,\n-getSegmentHealth,\n-    \n-    // Connection\n-    connected\n-  }\n-}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1753420018643,
            "name": "Commit-0",
            "content": "// Generated from TTL ontology on 2025-07-24T20:14:10.066165\nimport { ref, computed, onMounted, onUnmounted } from 'vue'\nimport type { Ref } from 'vue'\nimport type { \nAlert,\nAntivirus,\nApplicationAsset,\nAsset,\nAttack,\nBotnet,\nCSRF,\nComputeAsset,\nCorrectiveControl,\nDDoSAttack,\nDMZ,\nDataAsset,\nDataExfiltration,\nDetectiveControl,\nEDR,\nFirewall,\nIDS,\nIOC,\nIPS,\nInternalNetwork,\nLateralMovement,\nLoadBalancer,\nMalware,\nManInTheMiddleAttack,\nNetworkAsset,\nNetworkAttack,\nNetworkDevice,\nNetworkSegment,\nPacketSniffing,\nPhishingAttack,\nPortScan,\nPreventiveControl,\nPrivilegeEscalation,\nPublicNetwork,\nRansomware,\nRootkit,\nRouter,\nSIEM,\nSOAR,\nSQLInjection,\nSecurityControl,\nSecurityEvent,\nSecurityIncident,\nSocialEngineering,\nSpearPhishing,\nSpyware,\nSwitch,\nThreat,\nThreatIntelligence,\nTrojan,\nUserAsset,\nVPN,\nVirus,\nVulnerability,\nWebAttack,\nWorm,\nXSS,\nZeroDayVulnerability,\nThreatStats,\n  NetworkNode,\n  NetworkEdge\n} from '~/types/aegis'\n\nexport const useAegisFabric = () => {\n  // WebSocket connection\n  const ws = ref<WebSocket | null>(null)\n  const connected = ref(false)\n  \n  // State for each class\n  const alerts: Ref<Alert[]> = ref([])\n  const antiviruss: Ref<Antivirus[]> = ref([])\n  const applicationAssets: Ref<ApplicationAsset[]> = ref([])\n  const assets: Ref<Asset[]> = ref([])\n  const attacks: Ref<Attack[]> = ref([])\n  const botnets: Ref<Botnet[]> = ref([])\n  const csrfs: Ref<CSRF[]> = ref([])\n  const computeAssets: Ref<ComputeAsset[]> = ref([])\n  const correctiveControls: Ref<CorrectiveControl[]> = ref([])\n  const ddoSattacks: Ref<DDoSAttack[]> = ref([])\n  const dmzs: Ref<DMZ[]> = ref([])\n  const dataAssets: Ref<DataAsset[]> = ref([])\n  const dataExfiltrations: Ref<DataExfiltration[]> = ref([])\n  const detectiveControls: Ref<DetectiveControl[]> = ref([])\n  const edrs: Ref<EDR[]> = ref([])\n  const firewalls: Ref<Firewall[]> = ref([])\n  const idss: Ref<IDS[]> = ref([])\n  const iocs: Ref<IOC[]> = ref([])\n  const ipss: Ref<IPS[]> = ref([])\n  const internalNetworks: Ref<InternalNetwork[]> = ref([])\n  const lateralMovements: Ref<LateralMovement[]> = ref([])\n  const loadBalancers: Ref<LoadBalancer[]> = ref([])\n  const malwares: Ref<Malware[]> = ref([])\n  const manInTheMiddleAttacks: Ref<ManInTheMiddleAttack[]> = ref([])\n  const networkAssets: Ref<NetworkAsset[]> = ref([])\n  const networkAttacks: Ref<NetworkAttack[]> = ref([])\n  const networkDevices: Ref<NetworkDevice[]> = ref([])\n  const networkSegments: Ref<NetworkSegment[]> = ref([])\n  const packetSniffings: Ref<PacketSniffing[]> = ref([])\n  const phishingAttacks: Ref<PhishingAttack[]> = ref([])\n  const portScans: Ref<PortScan[]> = ref([])\n  const preventiveControls: Ref<PreventiveControl[]> = ref([])\n  const privilegeEscalations: Ref<PrivilegeEscalation[]> = ref([])\n  const publicNetworks: Ref<PublicNetwork[]> = ref([])\n  const ransomwares: Ref<Ransomware[]> = ref([])\n  const rootkits: Ref<Rootkit[]> = ref([])\n  const routers: Ref<Router[]> = ref([])\n  const siems: Ref<SIEM[]> = ref([])\n  const soars: Ref<SOAR[]> = ref([])\n  const sqlinjections: Ref<SQLInjection[]> = ref([])\n  const securityControls: Ref<SecurityControl[]> = ref([])\n  const securityEvents: Ref<SecurityEvent[]> = ref([])\n  const securityIncidents: Ref<SecurityIncident[]> = ref([])\n  const socialEngineerings: Ref<SocialEngineering[]> = ref([])\n  const spearPhishings: Ref<SpearPhishing[]> = ref([])\n  const spywares: Ref<Spyware[]> = ref([])\n  const switchs: Ref<Switch[]> = ref([])\n  const threats: Ref<Threat[]> = ref([])\n  const threatIntelligences: Ref<ThreatIntelligence[]> = ref([])\n  const trojans: Ref<Trojan[]> = ref([])\n  const userAssets: Ref<UserAsset[]> = ref([])\n  const vpns: Ref<VPN[]> = ref([])\n  const viruss: Ref<Virus[]> = ref([])\n  const vulnerabilitys: Ref<Vulnerability[]> = ref([])\n  const webAttacks: Ref<WebAttack[]> = ref([])\n  const worms: Ref<Worm[]> = ref([])\n  const xsss: Ref<XSS[]> = ref([])\n  const zeroDayVulnerabilitys: Ref<ZeroDayVulnerability[]> = ref([])\n  \n  // Computed properties\n  const activethreats = computed(() => {\n    const allThreats = []\n    allThreats.push(...attacks.value)\n    allThreats.push(...ddoSattacks.value)\n    allThreats.push(...manInTheMiddleAttacks.value)\n    allThreats.push(...networkAttacks.value)\n    allThreats.push(...phishingAttacks.value)\n    allThreats.push(...threats.value)\n    allThreats.push(...threatIntelligences.value)\n    allThreats.push(...webAttacks.value)\n    return allThreats\n  })\n  \n  const allAssets = computed(() => {\n    const assets = []\n    assets.push(...applicationAssets.value)\n    assets.push(...assets.value)\n    assets.push(...computeAssets.value)\n    assets.push(...dataAssets.value)\n    assets.push(...networkAssets.value)\n    assets.push(...userAssets.value)\n    return assets\n  })\n  \n  const threatStats = computed<ThreatStats>(() => ({\n    total: activethreats.value.length,\n    critical: activethreats.value.filter(t => t.severity === 'critical').length,\n    high: activethreats.value.filter(t => t.severity === 'high').length,\n    medium: activethreats.value.filter(t => t.severity === 'medium').length,\n    low: activethreats.value.filter(t => t.severity === 'low').length,\n    neutralized: 0\n  }))\n  \n  // WebSocket connection\n  const connect = () => {\n    ws.value = new WebSocket(`ws://${window.location.host}/api/aegis/ws`)\n    \n    ws.value.onopen = () => {\n      connected.value = true\n      console.log('Connected to Aegis Fabric')\n    }\n    \n    ws.value.onmessage = (event) => {\n      const data = JSON.parse(event.data)\n      handleMessage(data)\n    }\n    \n    ws.value.onclose = () => {\n      connected.value = false\n      console.log('Disconnected from Aegis Fabric')\n      // Reconnect after 1 second\n      setTimeout(connect, 1000)\n    }\n  }\n  \n  const handleMessage = (data: any) => {\n    switch (data.type) {\n      case 'AlertUpdate':\n        alerts.value = data.payload\n        break\n      case 'AntivirusUpdate':\n        antiviruss.value = data.payload\n        break\n      case 'ApplicationAssetUpdate':\n        applicationAssets.value = data.payload\n        break\n      case 'AssetUpdate':\n        assets.value = data.payload\n        break\n      case 'AttackUpdate':\n        attacks.value = data.payload\n        break\n      case 'BotnetUpdate':\n        botnets.value = data.payload\n        break\n      case 'CSRFUpdate':\n        csrfs.value = data.payload\n        break\n      case 'ComputeAssetUpdate':\n        computeAssets.value = data.payload\n        break\n      case 'CorrectiveControlUpdate':\n        correctiveControls.value = data.payload\n        break\n      case 'DDoSAttackUpdate':\n        ddoSattacks.value = data.payload\n        break\n      case 'DMZUpdate':\n        dmzs.value = data.payload\n        break\n      case 'DataAssetUpdate':\n        dataAssets.value = data.payload\n        break\n      case 'DataExfiltrationUpdate':\n        dataExfiltrations.value = data.payload\n        break\n      case 'DetectiveControlUpdate':\n        detectiveControls.value = data.payload\n        break\n      case 'EDRUpdate':\n        edrs.value = data.payload\n        break\n      case 'FirewallUpdate':\n        firewalls.value = data.payload\n        break\n      case 'IDSUpdate':\n        idss.value = data.payload\n        break\n      case 'IOCUpdate':\n        iocs.value = data.payload\n        break\n      case 'IPSUpdate':\n        ipss.value = data.payload\n        break\n      case 'InternalNetworkUpdate':\n        internalNetworks.value = data.payload\n        break\n      case 'LateralMovementUpdate':\n        lateralMovements.value = data.payload\n        break\n      case 'LoadBalancerUpdate':\n        loadBalancers.value = data.payload\n        break\n      case 'MalwareUpdate':\n        malwares.value = data.payload\n        break\n      case 'ManInTheMiddleAttackUpdate':\n        manInTheMiddleAttacks.value = data.payload\n        break\n      case 'NetworkAssetUpdate':\n        networkAssets.value = data.payload\n        break\n      case 'NetworkAttackUpdate':\n        networkAttacks.value = data.payload\n        break\n      case 'NetworkDeviceUpdate':\n        networkDevices.value = data.payload\n        break\n      case 'NetworkSegmentUpdate':\n        networkSegments.value = data.payload\n        break\n      case 'PacketSniffingUpdate':\n        packetSniffings.value = data.payload\n        break\n      case 'PhishingAttackUpdate':\n        phishingAttacks.value = data.payload\n        break\n      case 'PortScanUpdate':\n        portScans.value = data.payload\n        break\n      case 'PreventiveControlUpdate':\n        preventiveControls.value = data.payload\n        break\n      case 'PrivilegeEscalationUpdate':\n        privilegeEscalations.value = data.payload\n        break\n      case 'PublicNetworkUpdate':\n        publicNetworks.value = data.payload\n        break\n      case 'RansomwareUpdate':\n        ransomwares.value = data.payload\n        break\n      case 'RootkitUpdate':\n        rootkits.value = data.payload\n        break\n      case 'RouterUpdate':\n        routers.value = data.payload\n        break\n      case 'SIEMUpdate':\n        siems.value = data.payload\n        break\n      case 'SOARUpdate':\n        soars.value = data.payload\n        break\n      case 'SQLInjectionUpdate':\n        sqlinjections.value = data.payload\n        break\n      case 'SecurityControlUpdate':\n        securityControls.value = data.payload\n        break\n      case 'SecurityEventUpdate':\n        securityEvents.value = data.payload\n        break\n      case 'SecurityIncidentUpdate':\n        securityIncidents.value = data.payload\n        break\n      case 'SocialEngineeringUpdate':\n        socialEngineerings.value = data.payload\n        break\n      case 'SpearPhishingUpdate':\n        spearPhishings.value = data.payload\n        break\n      case 'SpywareUpdate':\n        spywares.value = data.payload\n        break\n      case 'SwitchUpdate':\n        switchs.value = data.payload\n        break\n      case 'ThreatUpdate':\n        threats.value = data.payload\n        break\n      case 'ThreatIntelligenceUpdate':\n        threatIntelligences.value = data.payload\n        break\n      case 'TrojanUpdate':\n        trojans.value = data.payload\n        break\n      case 'UserAssetUpdate':\n        userAssets.value = data.payload\n        break\n      case 'VPNUpdate':\n        vpns.value = data.payload\n        break\n      case 'VirusUpdate':\n        viruss.value = data.payload\n        break\n      case 'VulnerabilityUpdate':\n        vulnerabilitys.value = data.payload\n        break\n      case 'WebAttackUpdate':\n        webAttacks.value = data.payload\n        break\n      case 'WormUpdate':\n        worms.value = data.payload\n        break\n      case 'XSSUpdate':\n        xsss.value = data.payload\n        break\n      case 'ZeroDayVulnerabilityUpdate':\n        zeroDayVulnerabilitys.value = data.payload\n        break\n      default:\n        console.warn('Unknown message type:', data.type)\n    }\n  }\n  \n  // Actions\n  const neutralizeThreat = async (threatId: string) => {\n    if (ws.value?.readyState === WebSocket.OPEN) {\n      ws.value.send(JSON.stringify({\n        type: 'neutralizeThreat',\n        threatId\n      }))\n    }\n  }\n  \n  // Health checks\n  const getApplicationAssetHealth = () => {\n    const assets = applicationAssets.value\n    if (assets.length === 0) return 'unknown'\n    const healthyCount = assets.filter(a => a.status === 'healthy').length\n    const ratio = healthyCount / assets.length\n    if (ratio >= 0.9) return 'healthy'\n    if (ratio >= 0.7) return 'warning'\n    return 'critical'\n  }\n  const getAssetHealth = () => {\n    const assets = assets.value\n    if (assets.length === 0) return 'unknown'\n    const healthyCount = assets.filter(a => a.status === 'healthy').length\n    const ratio = healthyCount / assets.length\n    if (ratio >= 0.9) return 'healthy'\n    if (ratio >= 0.7) return 'warning'\n    return 'critical'\n  }\n  const getComputeAssetHealth = () => {\n    const assets = computeAssets.value\n    if (assets.length === 0) return 'unknown'\n    const healthyCount = assets.filter(a => a.status === 'healthy').length\n    const ratio = healthyCount / assets.length\n    if (ratio >= 0.9) return 'healthy'\n    if (ratio >= 0.7) return 'warning'\n    return 'critical'\n  }\n  const getDataAssetHealth = () => {\n    const assets = dataAssets.value\n    if (assets.length === 0) return 'unknown'\n    const healthyCount = assets.filter(a => a.status === 'healthy').length\n    const ratio = healthyCount / assets.length\n    if (ratio >= 0.9) return 'healthy'\n    if (ratio >= 0.7) return 'warning'\n    return 'critical'\n  }\n  const getNetworkAssetHealth = () => {\n    const assets = networkAssets.value\n    if (assets.length === 0) return 'unknown'\n    const healthyCount = assets.filter(a => a.status === 'healthy').length\n    const ratio = healthyCount / assets.length\n    if (ratio >= 0.9) return 'healthy'\n    if (ratio >= 0.7) return 'warning'\n    return 'critical'\n  }\n  const getUserAssetHealth = () => {\n    const assets = userAssets.value\n    if (assets.length === 0) return 'unknown'\n    const healthyCount = assets.filter(a => a.status === 'healthy').length\n    const ratio = healthyCount / assets.length\n    if (ratio >= 0.9) return 'healthy'\n    if (ratio >= 0.7) return 'warning'\n    return 'critical'\n  }\n  \n  const getSegmentHealth = (segment: any) => {\n    // Implement segment health logic\n    return 'healthy'\n  }\n  \n  // Network topology\n  const networkNodes = computed<NetworkNode[]>(() => {\n    // Build network nodes from assets\n    return []\n  })\n  \n  const networkEdges = computed<NetworkEdge[]>(() => {\n    // Build network edges from relationships\n    return []\n  })\n  \n  const activeNetworkThreats = computed(() => {\n    return activethreats.value.filter(t => t.targetType === 'network')\n  })\n  \n  // Lifecycle\n  onMounted(() => {\n    connect()\n  })\n  \n  onUnmounted(() => {\n    if (ws.value) {\n      ws.value.close()\n    }\n  })\n  \n  return {\n    // State\nalerts,\nantiviruss,\napplicationAssets,\nassets,\nattacks,\nbotnets,\ncsrfs,\ncomputeAssets,\ncorrectiveControls,\nddoSattacks,\ndmzs,\ndataAssets,\ndataExfiltrations,\ndetectiveControls,\nedrs,\nfirewalls,\nidss,\niocs,\nipss,\ninternalNetworks,\nlateralMovements,\nloadBalancers,\nmalwares,\nmanInTheMiddleAttacks,\nnetworkAssets,\nnetworkAttacks,\nnetworkDevices,\nnetworkSegments,\npacketSniffings,\nphishingAttacks,\nportScans,\npreventiveControls,\nprivilegeEscalations,\npublicNetworks,\nransomwares,\nrootkits,\nrouters,\nsiems,\nsoars,\nsqlinjections,\nsecurityControls,\nsecurityEvents,\nsecurityIncidents,\nsocialEngineerings,\nspearPhishings,\nspywares,\nswitchs,\nthreats,\nthreatIntelligences,\ntrojans,\nuserAssets,\nvpns,\nviruss,\nvulnerabilitys,\nwebAttacks,\nworms,\nxsss,\nzeroDayVulnerabilitys,\n    \n    // Computed\n    activethreats,\n    allAssets,\n    threatStats,\n    networkNodes,\n    networkEdges,\n    activeNetworkThreats,\n    \n    // Actions\n    neutralizeThreat,\n    \n    // Health\ngetApplicationAssetHealth,\ngetAssetHealth,\ngetComputeAssetHealth,\ngetDataAssetHealth,\ngetNetworkAssetHealth,\ngetUserAssetHealth,\ngetSegmentHealth,\n    \n    // Connection\n    connected\n  }\n}"
        }
    ]
}