{
    "sourceFile": "docs/ultimate-nuxt-dashboard-deployment.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1753473854139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1753473854139,
            "name": "Commit-0",
            "content": "# ðŸš€ Production Deployment Guide: Ultimate Nuxt Dashboard\n\n## Infrastructure Architecture\n\n### Production Environment Setup\n\n```yaml\n# infrastructure/production.yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: cns-dashboard\n  labels:\n    name: cns-dashboard\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: cns-dashboard-frontend\n  namespace: cns-dashboard\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: cns-dashboard-frontend\n  template:\n    metadata:\n      labels:\n        app: cns-dashboard-frontend\n    spec:\n      containers:\n      - name: dashboard\n        image: cns/dashboard:latest\n        ports:\n        - containerPort: 3000\n        env:\n        - name: NODE_ENV\n          value: \"production\"\n        - name: WS_URL\n          value: \"wss://api.cns-forge.com/ws\"\n        - name: API_BASE\n          value: \"https://api.cns-forge.com\"\n        - name: GRAPHQL_URL\n          value: \"https://api.cns-forge.com/graphql\"\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 3000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 3000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: cns-dashboard-service\n  namespace: cns-dashboard\nspec:\n  selector:\n    app: cns-dashboard-frontend\n  ports:\n  - port: 80\n    targetPort: 3000\n  type: LoadBalancer\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: cns-dashboard-ingress\n  namespace: cns-dashboard\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\n    cert-manager.io/cluster-issuer: \"letsencrypt-prod\"\n    nginx.ingress.kubernetes.io/ssl-redirect: \"true\"\n    nginx.ingress.kubernetes.io/force-ssl-redirect: \"true\"\nspec:\n  tls:\n  - hosts:\n    - dashboard.cns-forge.com\n    secretName: cns-dashboard-tls\n  rules:\n  - host: dashboard.cns-forge.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: cns-dashboard-service\n            port:\n              number: 80\n```\n\n## CI/CD Pipeline\n\n### GitHub Actions Workflow\n\n```yaml\n# .github/workflows/deploy.yml\nname: Deploy CNS Dashboard\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\nenv:\n  REGISTRY: ghcr.io\n  IMAGE_NAME: ${{ github.repository }}/cns-dashboard\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    \n    - name: Setup Node.js\n      uses: actions/setup-node@v4\n      with:\n        node-version: '18'\n        cache: 'npm'\n    \n    - name: Install dependencies\n      run: npm ci\n    \n    - name: Run linting\n      run: npm run lint\n    \n    - name: Run tests\n      run: npm run test:unit\n    \n    - name: Run type checking\n      run: npm run type-check\n    \n    - name: Build application\n      run: npm run build\n    \n    - name: Run E2E tests\n      run: npm run test:e2e\n\n  security-scan:\n    runs-on: ubuntu-latest\n    needs: test\n    steps:\n    - uses: actions/checkout@v4\n    \n    - name: Run security scan\n      uses: snyk/actions/node@master\n      env:\n        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n      with:\n        args: --severity-threshold=high\n\n  build-and-push:\n    runs-on: ubuntu-latest\n    needs: [test, security-scan]\n    permissions:\n      contents: read\n      packages: write\n    steps:\n    - uses: actions/checkout@v4\n    \n    - name: Set up Docker Buildx\n      uses: docker/setup-buildx-action@v3\n    \n    - name: Log in to Container Registry\n      uses: docker/login-action@v3\n      with:\n        registry: ${{ env.REGISTRY }}\n        username: ${{ github.actor }}\n        password: ${{ secrets.GITHUB_TOKEN }}\n    \n    - name: Extract metadata\n      id: meta\n      uses: docker/metadata-action@v5\n      with:\n        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\n        tags: |\n          type=ref,event=branch\n          type=ref,event=pr\n          type=semver,pattern={{version}}\n          type=semver,pattern={{major}}.{{minor}}\n          type=sha\n    \n    - name: Build and push Docker image\n      uses: docker/build-push-action@v5\n      with:\n        context: .\n        push: true\n        tags: ${{ steps.meta.outputs.tags }}\n        labels: ${{ steps.meta.outputs.labels }}\n        cache-from: type=gha\n        cache-to: type=gha,mode=max\n\n  deploy-staging:\n    runs-on: ubuntu-latest\n    needs: build-and-push\n    environment: staging\n    steps:\n    - name: Deploy to staging\n      uses: steebchen/kubectl@v2\n      with:\n        config: ${{ secrets.KUBE_CONFIG_STAGING }}\n        command: apply -f infrastructure/staging.yaml\n    \n    - name: Wait for deployment\n      uses: steebchen/kubectl@v2\n      with:\n        config: ${{ secrets.KUBE_CONFIG_STAGING }}\n        command: rollout status deployment/cns-dashboard-frontend -n cns-dashboard\n\n  deploy-production:\n    runs-on: ubuntu-latest\n    needs: [build-and-push, deploy-staging]\n    environment: production\n    if: github.ref == 'refs/heads/main'\n    steps:\n    - name: Deploy to production\n      uses: steebchen/kubectl@v2\n      with:\n        config: ${{ secrets.KUBE_CONFIG_PRODUCTION }}\n        command: apply -f infrastructure/production.yaml\n    \n    - name: Wait for deployment\n      uses: steebchen/kubectl@v2\n      with:\n        config: ${{ secrets.KUBE_CONFIG_PRODUCTION }}\n        command: rollout status deployment/cns-dashboard-frontend -n cns-dashboard\n    \n    - name: Run smoke tests\n      run: |\n        curl -f https://dashboard.cns-forge.com/health\n        curl -f https://dashboard.cns-forge.com/ready\n```\n\n## Performance Optimization\n\n### Nuxt Configuration for Production\n\n```typescript\n// nuxt.config.ts\nexport default defineNuxtConfig({\n  // Production optimizations\n  nitro: {\n    compressPublicAssets: true,\n    minify: true,\n    prerender: {\n      routes: ['/']\n    }\n  },\n  \n  // Build optimizations\n  build: {\n    transpile: ['d3', 'three', 'chart.js']\n  },\n  \n  // Runtime optimizations\n  runtimeConfig: {\n    public: {\n      wsUrl: process.env.WS_URL || 'wss://api.cns-forge.com/ws',\n      apiBase: process.env.API_BASE || 'https://api.cns-forge.com',\n      graphqlUrl: process.env.GRAPHQL_URL || 'https://api.cns-forge.com/graphql'\n    }\n  },\n  \n  // Performance modules\n  modules: [\n    '@nuxtjs/tailwindcss',\n    '@pinia/nuxt',\n    '@vueuse/nuxt',\n    '@nuxtjs/robots',\n    '@nuxtjs/sitemap'\n  ],\n  \n  // SEO and performance\n  app: {\n    head: {\n      title: 'CNS Ultimate Dashboard',\n      meta: [\n        { charset: 'utf-8' },\n        { name: 'viewport', content: 'width=device-width, initial-scale=1' },\n        { name: 'description', content: 'Ultimate command center for CNS/BitActor/Forge ecosystem' },\n        { name: 'theme-color', content: '#00d4ff' }\n      ],\n      link: [\n        { rel: 'icon', type: 'image/x-icon', href: '/favicon.ico' },\n        { rel: 'preconnect', href: 'https://api.cns-forge.com' },\n        { rel: 'dns-prefetch', href: 'https://api.cns-forge.com' }\n      ]\n    }\n  },\n  \n  // PWA configuration\n  pwa: {\n    registerType: 'autoUpdate',\n    workbox: {\n      navigateFallback: '/',\n      globPatterns: ['**/*.{js,css,html,png,svg,ico}']\n    },\n    client: {\n      installPrompt: true\n    },\n    devOptions: {\n      enabled: true,\n      type: 'module'\n    }\n  }\n})\n```\n\n### CDN and Edge Optimization\n\n```typescript\n// server/middleware/cdn.ts\nexport default defineEventHandler((event) => {\n  // Add CDN headers\n  setResponseHeaders(event, {\n    'Cache-Control': 'public, max-age=31536000, immutable',\n    'CDN-Cache-Control': 'public, max-age=31536000',\n    'Vary': 'Accept-Encoding'\n  });\n  \n  // Gzip compression\n  if (getRequestHeader(event, 'accept-encoding')?.includes('gzip')) {\n    setResponseHeader(event, 'Content-Encoding', 'gzip');\n  }\n});\n```\n\n## Monitoring and Observability\n\n### Application Monitoring\n\n```typescript\n// plugins/monitoring.client.ts\nexport default defineNuxtPlugin(() => {\n  const config = useRuntimeConfig();\n  \n  // Performance monitoring\n  if (process.client) {\n    // Web Vitals\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(console.log);\n      getFID(console.log);\n      getFCP(console.log);\n      getLCP(console.log);\n      getTTFB(console.log);\n    });\n    \n    // Error tracking\n    window.addEventListener('error', (event) => {\n      console.error('Global error:', event.error);\n      // Send to monitoring service\n    });\n    \n    // Unhandled promise rejections\n    window.addEventListener('unhandledrejection', (event) => {\n      console.error('Unhandled promise rejection:', event.reason);\n      // Send to monitoring service\n    });\n  }\n});\n```\n\n### Health Check Endpoints\n\n```typescript\n// server/api/health.get.ts\nexport default defineEventHandler(async (event) => {\n  const health = {\n    status: 'healthy',\n    timestamp: new Date().toISOString(),\n    version: process.env.npm_package_version,\n    uptime: process.uptime(),\n    memory: process.memoryUsage(),\n    checks: {\n      database: await checkDatabase(),\n      websocket: await checkWebSocket(),\n      api: await checkAPI()\n    }\n  };\n  \n  const isHealthy = Object.values(health.checks).every(check => check.status === 'healthy');\n  \n  setResponseStatus(event, isHealthy ? 200 : 503);\n  return health;\n});\n\nasync function checkDatabase() {\n  try {\n    // Database health check\n    return { status: 'healthy', responseTime: 10 };\n  } catch (error) {\n    return { status: 'unhealthy', error: error.message };\n  }\n}\n\nasync function checkWebSocket() {\n  try {\n    // WebSocket health check\n    return { status: 'healthy', responseTime: 5 };\n  } catch (error) {\n    return { status: 'unhealthy', error: error.message };\n  }\n}\n\nasync function checkAPI() {\n  try {\n    // API health check\n    return { status: 'healthy', responseTime: 15 };\n  } catch (error) {\n    return { status: 'unhealthy', error: error.message };\n  }\n}\n```\n\n## Security Configuration\n\n### Security Headers\n\n```typescript\n// server/middleware/security.ts\nexport default defineEventHandler((event) => {\n  // Security headers\n  setResponseHeaders(event, {\n    'X-Content-Type-Options': 'nosniff',\n    'X-Frame-Options': 'DENY',\n    'X-XSS-Protection': '1; mode=block',\n    'Referrer-Policy': 'strict-origin-when-cross-origin',\n    'Content-Security-Policy': `\n      default-src 'self';\n      script-src 'self' 'unsafe-inline' 'unsafe-eval' https://api.cns-forge.com;\n      style-src 'self' 'unsafe-inline' https://fonts.googleapis.com;\n      font-src 'self' https://fonts.gstatic.com;\n      img-src 'self' data: https:;\n      connect-src 'self' wss://api.cns-forge.com https://api.cns-forge.com;\n      frame-ancestors 'none';\n    `.replace(/\\s+/g, ' ').trim()\n  });\n});\n```\n\n### Authentication Middleware\n\n```typescript\n// server/middleware/auth.ts\nexport default defineEventHandler(async (event) => {\n  const publicRoutes = ['/health', '/ready', '/api/health'];\n  \n  if (publicRoutes.includes(getRequestPath(event))) {\n    return;\n  }\n  \n  const token = getRequestHeader(event, 'authorization')?.replace('Bearer ', '');\n  \n  if (!token) {\n    throw createError({\n      statusCode: 401,\n      statusMessage: 'Unauthorized'\n    });\n  }\n  \n  try {\n    // Verify JWT token\n    const decoded = await verifyToken(token);\n    event.context.user = decoded;\n  } catch (error) {\n    throw createError({\n      statusCode: 401,\n      statusMessage: 'Invalid token'\n    });\n  }\n});\n```\n\n## Backup and Disaster Recovery\n\n### Database Backup Strategy\n\n```yaml\n# infrastructure/backup-cronjob.yaml\napiVersion: batch/v1\nkind: CronJob\nmetadata:\n  name: dashboard-backup\n  namespace: cns-dashboard\nspec:\n  schedule: \"0 2 * * *\"  # Daily at 2 AM\n  jobTemplate:\n    spec:\n      template:\n        spec:\n          containers:\n          - name: backup\n            image: postgres:15\n            command:\n            - /bin/bash\n            - -c\n            - |\n              pg_dump $DATABASE_URL | gzip > /backup/dashboard-$(date +%Y%m%d).sql.gz\n              aws s3 cp /backup/dashboard-$(date +%Y%m%d).sql.gz s3://cns-backups/\n            env:\n            - name: DATABASE_URL\n              valueFrom:\n                secretKeyRef:\n                  name: dashboard-secrets\n                  key: database-url\n            - name: AWS_ACCESS_KEY_ID\n              valueFrom:\n                secretKeyRef:\n                  name: dashboard-secrets\n                  key: aws-access-key\n            - name: AWS_SECRET_ACCESS_KEY\n              valueFrom:\n                secretKeyRef:\n                  name: dashboard-secrets\n                  key: aws-secret-key\n            volumeMounts:\n            - name: backup-volume\n              mountPath: /backup\n          volumes:\n          - name: backup-volume\n            emptyDir: {}\n          restartPolicy: OnFailure\n```\n\n## Scaling Strategy\n\n### Horizontal Pod Autoscaler\n\n```yaml\n# infrastructure/hpa.yaml\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: cns-dashboard-hpa\n  namespace: cns-dashboard\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: cns-dashboard-frontend\n  minReplicas: 3\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n  - type: Resource\n    resource:\n      name: memory\n      target:\n        type: Utilization\n        averageUtilization: 80\n  behavior:\n    scaleDown:\n      stabilizationWindowSeconds: 300\n      policies:\n      - type: Percent\n        value: 10\n        periodSeconds: 60\n    scaleUp:\n      stabilizationWindowSeconds: 60\n      policies:\n      - type: Percent\n        value: 50\n        periodSeconds: 60\n```\n\nThis deployment guide provides a comprehensive approach to deploying the ultimate Nuxt dashboard in production with enterprise-grade security, monitoring, and scalability features. "
        }
    ]
}