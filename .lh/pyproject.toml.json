{
    "sourceFile": "pyproject.toml",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1753290977902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1753290977902,
            "name": "Commit-0",
            "content": "[project]\nname = \"cns\"\nversion = \"8.0.0\"\ndescription = \"Computational Narrative System - Semantic AOT Compiler for Real-Time Systems\"\nauthors = [\n    { name = \"James I. Chatman\", email = \"james@chatman.ai\" },\n    { name = \"Sean A. Chatman\", email = \"sean@chatman.ai\" },\n]\nreadme = \"README.md\"\nlicense = { text = \"Proprietary\" }\nrequires-python = \">=3.8\"\nkeywords = [\"semantic-web\", \"ontology\", \"realtime\", \"aot-compiler\", \"owl\", \"ttl\", \"c-codegen\", \"ultra-low-latency\"]\nclassifiers = [\n    \"Development Status :: 5 - Production/Stable\",\n    \"Intended Audience :: Developers\",\n    \"Intended Audience :: Information Technology\",\n    \"Topic :: Software Development :: Code Generators\",\n    \"Topic :: Software Development :: Compilers\",\n    \"Topic :: System :: Real Time\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3.8\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n]\n\ndependencies = [\n    # Core semantic processing\n    \"rdflib>=7.0.0\",\n    \"rdflib-jsonld>=0.6.2\",\n    \n    # Template engine for C code generation\n    \"jinja2>=3.1.0\",\n    \n    # DSPy integration for neural reasoning\n    \"dspy-ai>=2.4.0\",\n    \n    # Performance and monitoring  \n    \"opentelemetry-api>=1.12.0\",\n    \"opentelemetry-sdk>=1.12.0\",\n    \n    # Development and testing\n    \"pytest>=7.0.0\",\n    \"pytest-benchmark>=4.0.0\",\n    \"pytest-cov>=4.0.0\",\n    \n    # Type checking and linting\n    \"mypy>=1.5.0\",\n    \"black>=23.0.0\",\n    \"ruff>=0.1.0\",\n    \n    # Configuration and CLI\n    \"pydantic>=2.0.0\",\n    \"typer>=0.9.0\",\n    \"rich>=13.0.0\",\n    \"psutil>=5.9.0\",\n    \n    # Data processing\n    \"pyyaml>=6.0.0\",\n    \"toml>=0.10.2\",\n]\n\n[project.optional-dependencies]\ndev = [\n    \"pre-commit>=3.0.0\",\n    \"tox>=4.0.0\",\n    \"sphinx>=7.0.0\",\n    \"sphinx-rtd-theme>=1.3.0\",\n]\n\nbenchmark = [\n    \"psutil>=5.9.0\",\n    \"memory-profiler>=0.61.0\",\n    \"py-spy>=0.3.14\",\n]\n\ntrading = [\n    \"numpy>=1.24.0\",\n    \"pandas>=2.0.0\",\n    \"scipy>=1.10.0\",\n]\n\n[project.urls]\nHomepage = \"https://github.com/chatmangpt/cns\"\nDocumentation = \"https://cns.chatman.ai/docs\"\nRepository = \"https://github.com/chatmangpt/cns.git\"\nIssues = \"https://github.com/chatmangpt/cns/issues\"\n\n[project.scripts]\ncns-compile = \"owl_compiler:main\"\ncns-benchmark = \"run_benchmark:main\"\ncns-validate = \"aot_lifecycle:main\"\ncns-status = \"cns_status:main\"\nttl2dspy = \"ttl2dspy:main\"\n\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n\n[tool.hatch.build.targets.wheel]\npackages = [\n    \"src/cns\",\n    \"ontologies\",\n    \"generated_c\",\n]\n\n[tool.uv]\ndev-dependencies = [\n    \"pre-commit>=3.0.0\",\n    \"pytest>=7.0.0\",\n    \"pytest-benchmark>=4.0.0\",\n    \"mypy>=1.5.0\",\n    \"black>=23.0.0\",\n    \"ruff>=0.1.0\",\n]\n\n[tool.uv.workspace]\nmembers = [\n    \"hyperintel-ttl2dspy\",\n]\n\n[tool.black]\nline-length = 100\ntarget-version = ['py38', 'py39', 'py310', 'py311', 'py312']\ninclude = '\\.pyi?$'\nextend-exclude = '''\n/(\n    \\.eggs\n  | \\.git\n  | \\.hg\n  | \\.mypy_cache\n  | \\.tox\n  | \\.venv\n  | _build\n  | buck-out\n  | build\n  | dist\n  | generated_c\n  | v8/include\n)/\n'''\n\n[tool.ruff]\nline-length = 100\ntarget-version = \"py38\"\n\n[tool.ruff.lint]\nselect = [\n    \"E\",  # pycodestyle errors\n    \"W\",  # pycodestyle warnings\n    \"F\",  # pyflakes\n    \"I\",  # isort\n    \"B\",  # flake8-bugbear\n    \"C4\", # flake8-comprehensions\n    \"UP\", # pyupgrade\n]\nignore = [\n    \"E501\",  # line too long, handled by black\n    \"B008\",  # do not perform function calls in argument defaults\n    \"C901\",  # too complex\n]\nexclude = [\n    \".bzr\",\n    \".direnv\",\n    \".eggs\",\n    \".git\",\n    \".git-rewrite\",\n    \".hg\",\n    \".mypy_cache\",\n    \".nox\",\n    \".pants.d\",\n    \".pytype\",\n    \".ruff_cache\",\n    \".svn\",\n    \".tox\",\n    \".venv\",\n    \"__pypackages__\",\n    \"_build\",\n    \"buck-out\",\n    \"build\",\n    \"dist\",\n    \"node_modules\",\n    \"venv\",\n    \"generated_c\",\n    \"v8/include\",\n]\n\n[tool.ruff.lint.per-file-ignores]\n\"__init__.py\" = [\"F401\"]\n\"test_*.py\" = [\"B011\"]\n\n[tool.mypy]\npython_version = \"3.8\"\nwarn_return_any = true\nwarn_unused_configs = true\ndisallow_untyped_defs = true\ndisallow_incomplete_defs = true\ncheck_untyped_defs = true\ndisallow_untyped_decorators = true\nno_implicit_optional = true\nwarn_redundant_casts = true\nwarn_unused_ignores = true\nwarn_no_return = true\nwarn_unreachable = true\nstrict_equality = true\nshow_error_codes = true\n\n[[tool.mypy.overrides]]\nmodule = [\n    \"rdflib.*\",\n    \"dspy.*\",\n    \"opentelemetry.*\",\n]\nignore_missing_imports = true\n\n[tool.pytest.ini_options]\nminversion = \"7.0\"\naddopts = \"-ra -q --strict-markers --strict-config\"\ntestpaths = [\n    \"tests\",\n    \"owl_compiler_tests\",\n]\nmarkers = [\n    \"slow: marks tests as slow (deselect with '-m \\\"not slow\\\"')\",\n    \"integration: marks tests as integration tests\",\n    \"benchmark: marks tests as benchmark tests\",\n    \"uhft: marks tests as ultra-high-frequency trading specific\",\n]\n\n[tool.coverage.run]\nsource = [\n    \"owl_compiler\",\n    \"ttl2dspy\", \n    \"aot_lifecycle\",\n    \"run_benchmark\",\n]\nomit = [\n    \"*/tests/*\",\n    \"*/test_*\",\n    \"generated_c/*\",\n    \"v8/*\",\n]\n\n[tool.coverage.report]\nexclude_lines = [\n    \"pragma: no cover\",\n    \"def __repr__\",\n    \"if self.debug:\",\n    \"if settings.DEBUG\",\n    \"raise AssertionError\",\n    \"raise NotImplementedError\",\n    \"if 0:\",\n    \"if __name__ == .__main__.:\",\n    \"class .*\\\\bProtocol\\\\):\",\n    \"@(abc\\\\.)?abstractmethod\",\n]\n"
        }
    ]
}