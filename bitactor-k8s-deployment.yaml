---
# BitActor Kubernetes Deployment Manifests
# Generated from 80/20 Pipeline: typer→turtle→ttl2dspy→BitActor→Erlang→Ash→Reactor→k8s

apiVersion: v1
kind: Namespace
metadata:
  name: bitactor-system
  labels:
    app: bitactor
    component: namespace

---
# ConfigMap for TTL Constraints
apiVersion: v1
kind: ConfigMap
metadata:
  name: bitactor-ttl-config
  namespace: bitactor-system
data:
  ttl_constraints.yaml: |
    global_ttl_budget_ms: 5000
    actor_ttl_budget_ms: 8
    precision: nanosecond
    max_actors: 100
    violations:
      action: alert
      threshold_percent: 20

---
# ConfigMap for Swarm Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: bitactor-swarm-config
  namespace: bitactor-system
data:
  swarm_config.yaml: |
    topology: hierarchical
    strategy: adaptive
    auto_scale: true
    min_actors: 3
    max_actors: 100
    target_cpu_percent: 70

---
# Secret for Database Connection
apiVersion: v1
kind: Secret
metadata:
  name: bitactor-db-secret
  namespace: bitactor-system
type: Opaque
data:
  # Base64 encoded values
  DATABASE_URL: cG9zdGdyZXM6Ly91c2VyOnBhc3N3b3JkQGJpdGFjdG9yLWRiOjU0MzIvYml0YWN0b3I=

---
# Service for BitActor
apiVersion: v1
kind: Service
metadata:
  name: bitactor-service
  namespace: bitactor-system
  labels:
    app: bitactor
    component: service
spec:
  type: ClusterIP
  selector:
    app: bitactor
    component: genserver
  ports:
    - name: epmd
      port: 4369
      targetPort: 4369
      protocol: TCP
    - name: erlang
      port: 9100
      targetPort: 9100
      protocol: TCP
    - name: metrics
      port: 9090
      targetPort: 9090
      protocol: TCP

---
# Headless Service for Erlang Clustering
apiVersion: v1
kind: Service
metadata:
  name: bitactor-headless
  namespace: bitactor-system
  labels:
    app: bitactor
    component: headless-service
spec:
  type: ClusterIP
  clusterIP: None
  selector:
    app: bitactor
    component: genserver
  ports:
    - name: epmd
      port: 4369
      targetPort: 4369

---
# StatefulSet for BitActor GenServers
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: bitactor-genserver
  namespace: bitactor-system
spec:
  serviceName: bitactor-headless
  replicas: 3
  selector:
    matchLabels:
      app: bitactor
      component: genserver
  template:
    metadata:
      labels:
        app: bitactor
        component: genserver
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: bitactor
        image: bitactor:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 4369
          name: epmd
        - containerPort: 9100
          name: erlang
        - containerPort: 9090
          name: metrics
        env:
        - name: RELEASE_COOKIE
          valueFrom:
            secretKeyRef:
              name: bitactor-erlang-cookie
              key: cookie
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: RELEASE_NODE
          value: "bitactor@$(POD_IP)"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: bitactor-db-secret
              key: DATABASE_URL
        - name: TTL_BUDGET_MS
          value: "8"
        - name: MAX_ACTORS
          value: "100"
        volumeMounts:
        - name: ttl-config
          mountPath: /app/config/ttl
        - name: swarm-config
          mountPath: /app/config/swarm
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 9090
          initialDelaySeconds: 10
          periodSeconds: 5
      volumes:
      - name: ttl-config
        configMap:
          name: bitactor-ttl-config
      - name: swarm-config
        configMap:
          name: bitactor-swarm-config

---
# HorizontalPodAutoscaler for BitActor
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: bitactor-hpa
  namespace: bitactor-system
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: bitactor-genserver
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: bitactor_signals_per_second
      target:
        type: AverageValue
        averageValue: "1000"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
      - type: Pods
        value: 2
        periodSeconds: 60

---
# NetworkPolicy for BitActor
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: bitactor-network-policy
  namespace: bitactor-system
spec:
  podSelector:
    matchLabels:
      app: bitactor
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: bitactor-system
    ports:
    - protocol: TCP
      port: 4369
    - protocol: TCP
      port: 9100
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: bitactor-system
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 4369  # EPMD
    - protocol: TCP
      port: 9100  # Erlang

---
# PodDisruptionBudget for High Availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: bitactor-pdb
  namespace: bitactor-system
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: bitactor
      component: genserver

---
# ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: bitactor-monitor
  namespace: bitactor-system
  labels:
    app: bitactor
    prometheus: kube-prometheus
spec:
  selector:
    matchLabels:
      app: bitactor
      component: service
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics

---
# PrometheusRule for Alerts
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: bitactor-alerts
  namespace: bitactor-system
  labels:
    app: bitactor
    prometheus: kube-prometheus
spec:
  groups:
  - name: bitactor.rules
    interval: 30s
    rules:
    - alert: BitActorTTLViolation
      expr: rate(bitactor_ttl_violations_total[5m]) > 0.1
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "BitActor TTL violations detected"
        description: "Actor {{ $labels.actor_id }} is experiencing TTL violations"
    
    - alert: BitActorHighErrorRate
      expr: rate(bitactor_signals_failed_total[5m]) / rate(bitactor_signals_processed_total[5m]) > 0.1
      for: 5m
      labels:
        severity: critical
      annotations:
        summary: "High error rate in BitActor signal processing"
        description: "Error rate is {{ $value }}% for actor {{ $labels.actor_id }}"
    
    - alert: BitActorSwarmUnhealthy
      expr: bitactor_swarm_health_status != 1
      for: 10m
      labels:
        severity: warning
      annotations:
        summary: "BitActor swarm is unhealthy"
        description: "Swarm {{ $labels.swarm_id }} health check is failing"

---
# Job for Database Migration
apiVersion: batch/v1
kind: Job
metadata:
  name: bitactor-db-migrate
  namespace: bitactor-system
spec:
  template:
    metadata:
      name: bitactor-db-migrate
    spec:
      restartPolicy: OnFailure
      containers:
      - name: migrate
        image: bitactor:latest
        command: ["/app/bin/bitactor", "eval", "BitActor.Release.migrate"]
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: bitactor-db-secret
              key: DATABASE_URL

---
# CronJob for Telemetry Cleanup
apiVersion: batch/v1
kind: CronJob
metadata:
  name: bitactor-telemetry-cleanup
  namespace: bitactor-system
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
          - name: cleanup
            image: bitactor:latest
            command: 
            - /app/bin/bitactor
            - eval
            - |
              BitActor.Ash.Resources.TelemetryFrame
              |> Ash.Query.filter(timestamp < ago(7, :day))
              |> BitActor.Ash.Domain.destroy!()

---
# Ingress for External Access (optional)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: bitactor-ingress
  namespace: bitactor-system
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  tls:
  - hosts:
    - bitactor.example.com
    secretName: bitactor-tls
  rules:
  - host: bitactor.example.com
    http:
      paths:
      - path: /metrics
        pathType: Prefix
        backend:
          service:
            name: bitactor-service
            port:
              number: 9090