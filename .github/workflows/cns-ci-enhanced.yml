name: CNS Continuous Integration (Enhanced)
on:
  push:
    branches: [master, main, develop]
  pull_request:
    branches: [master, main]

# Prevent multiple runs for same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.11'
  UV_SYSTEM_PYTHON: 1

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      # Cache uv installation
      - name: Cache uv
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('.github/workflows/*.yml') }}
      
      - name: Install uv
        if: steps.cache-uv.outputs.cache-hit != 'true'
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      
      # Cache Python dependencies
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-py-${{ env.PYTHON_VERSION }}-${{ hashFiles('pyproject.toml', 'uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-py-${{ env.PYTHON_VERSION }}-
      
      - name: Install dependencies
        run: uv sync --dev
      
      - name: Run ruff
        run: uv run ruff check .
      
      - name: Check formatting
        run: uv run ruff format --check .

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc make clang
      
      # Cache for each Python version
      - name: Cache uv
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('.github/workflows/*.yml') }}
      
      - name: Install uv
        if: steps.cache-uv.outputs.cache-hit != 'true'
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-py-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml', 'uv.lock') }}
      
      - name: Install dependencies
        run: uv sync
      
      - name: Run neural integration tests
        run: |
          uv run python neural_integration_test.py
        timeout-minutes: 5
      
      - name: Run TTL2DSPy tests
        run: |
          uv run python ttl2dspy.py ontologies/generated/uhft/uhft_core.ttl test_output.py
          test -f test_output.py || exit 1
      
      - name: Test C compilation
        run: |
          uv run python owl_compiler.py ontologies/generated/uhft/uhft_core.ttl --output test_build
          cd test_build
          make
          ./uhft_core --self-test
      
      # Collect test results
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            test-results/
            *.log

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache uv and dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/uv
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-coverage-${{ hashFiles('pyproject.toml', 'uv.lock') }}
      
      - name: Install uv
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      
      - name: Install dependencies
        run: uv sync --dev
      
      - name: Run tests with coverage
        run: |
          uv run pytest --cov=. --cov-report=xml --cov-report=html
        continue-on-error: true
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
      
      # Check for secrets
      - name: Run gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache uv and dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/uv
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-perf-${{ hashFiles('pyproject.toml', 'uv.lock') }}
      
      - name: Install dependencies
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh || true
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          uv sync
      
      # Cache benchmark results for comparison
      - name: Cache benchmark results
        uses: actions/cache@v4
        with:
          path: .benchmarks
          key: ${{ runner.os }}-benchmarks-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-benchmarks-
      
      - name: Run performance benchmarks
        run: |
          uv run python run_benchmark.py > benchmark-results.txt
          
          # Extract performance score
          SCORE=$(grep "Performance Score:" benchmark-results.txt | cut -d':' -f2 | cut -d'/' -f1 | tr -d ' ')
          echo "PERF_SCORE=$SCORE" >> $GITHUB_ENV
          echo "Performance Score: $SCORE"
          
          # Fail if below threshold
          if (( $(echo "$SCORE < 80" | bc -l) )); then
            echo "::error::Performance score too low: $SCORE/100 (minimum: 80)"
            exit 1
          fi
      
      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const score = process.env.PERF_SCORE;
            const emoji = score >= 95 ? '🚀' : score >= 80 ? '✅' : '⚠️';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Performance Results ${emoji}
              
              - **Performance Score**: ${score}/100
              - **Status**: ${score >= 80 ? 'PASSED' : 'FAILED'}
              
              <details>
              <summary>View detailed results</summary>
              
              \`\`\`
              ${require('fs').readFileSync('benchmark-results.txt', 'utf8').slice(0, 3000)}
              \`\`\`
              </details>`
            })
      
      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: |
            benchmark-results.txt
            benchmark-*.txt

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          uv sync
      
      - name: Run OTEL validation
        run: |
          uv run python validate_otel.py
        timeout-minutes: 10
      
      - name: Run pipeline validation
        run: |
          uv run python pipeline_validator.py || true
        timeout-minutes: 5
        continue-on-error: true
      
      - name: Test deployment script
        run: |
          ./deploy_local.sh local status || true

  # Summary job for branch protection
  ci-success:
    name: CI Success
    if: always()
    needs: [lint, test, security, performance, integration]
    runs-on: ubuntu-latest
    steps:
      - name: Check CI Status
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "::error::One or more CI jobs failed"
            exit 1
          fi
          echo "✅ All CI checks passed!"